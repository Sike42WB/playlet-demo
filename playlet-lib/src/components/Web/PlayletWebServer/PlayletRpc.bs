import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/components/VideoPlayer/VideoUtils.bs"
import "pkg:/source/asyncTask/asyncTask.bs"
import "pkg:/components/Services/Invidious/InvidiousLogoutTask.bs"

function InvidiousLogout(unusued as dynamic)
    invidiousNode = m.top.invidious
    ' TODO: this needs a task because it starts a request and we're currently on render thread
    ' We need a request library that does not block
    StartAsyncTask(InvidiousLogoutTask, { node: invidiousNode })
end function

function PlayVideo(args as object) as void
    videoId = args?.videoId
    if videoId = invalid
        return
    end if

    timestamp = args.timestamp
    m.log.info("PlayVideo: ", videoId, "timestamp: ", timestamp)

    if IsString(timestamp)
        timestamp = timestamp.toInt()
    end if

    ' TODO: fix focus when video played from rpc
    VideoUtils.PlayVideo({
        videoId: videoId,
        timestamp: timestamp
    })
end function

function SetPlayletLibUrls(args as object)
    content = args?.content
    if content = invalid
        RegistryUtils.Delete(RegistryUtils.PLAYLET_LIB_URLS)
    else
        RegistryUtils.Write(RegistryUtils.PLAYLET_LIB_URLS, content)
    end if
end function
