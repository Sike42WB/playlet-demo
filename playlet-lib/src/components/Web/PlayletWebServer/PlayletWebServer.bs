import "pkg:/components/Web/PlayletWebServer/Middleware/BookmarksRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/DashRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/InvidiousRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/PlayletLibUrlsRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/PlayQueueRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/PreferencesRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/SearchHistoryRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/StateApiRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/ViewRouter.bs"
import "pkg:/components/Web/WebServer/Middleware/CorsMiddleware.bs"
import "pkg:/components/Web/WebServer/Middleware/EtagMiddleware.bs"
import "pkg:/components/Web/WebServer/Middleware/HttpStaticFilesRouter.bs"

function Init()
    m.top.packageName = "Playlet"
    m.top.serverName = "Playlet Web Server"
end function

function GetServerAddress(unused as dynamic) as dynamic
    port = m.top.port
    ip = m.top.applicationInfo@.GetLocalIpAddress()
    if StringUtils.IsNullOrEmpty(ip)
        return invalid
    end if
    return `http://${ip}:${port}`
end function

function SetupRoutes(server as object)
    homeRouter = new Http.HttpRouter()
    homeRouter.Get("/", function(context as object) as boolean
        response = context.response
        response.Redirect("/index.html")
        return true
    end function)

    server.UseRouter(new Http.CorsMiddleware())
    server.UseRouter(homeRouter)
    server.UseRouter(new Http.StateApiRouter())
    server.UseRouter(new Http.DashRouter())
    server.UseRouter(new Http.PreferencesRouter())
    server.UseRouter(new Http.InvidiousRouter())
    server.UseRouter(new Http.PlayQueueRouter())
    server.UseRouter(new Http.BookmarksRouter())
    server.UseRouter(new Http.ViewRouter())
    server.UseRouter(new Http.SearchHistoryRouter())
    server.UseRouter(new Http.PlayletLibUrlsRouter())

    etags = new Http.EtagUtils()
    server.UseRouter(new Http.HttpStaticFilesRouter("/", "libpkg:/www", etags, { staticFiles: true }))
    server.UseRouter(new Http.HttpStaticFilesRouter("/config", "libpkg:/config", etags, { staticFiles: true }))
    server.UseRouter(new Http.HttpStaticFilesRouter("/logs", "cachefs:/logs", etags, { fsCheck: true }))
    #if DEBUG
        options = { showDirectories: true, showHidden: true, staticFiles: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/libpkg", "libpkg:/", etags, options))
        options = { showDirectories: true, showHidden: true, fsCheck: true, staticFiles: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/pkg", "pkg:/", etags, options))
        options = { showDirectories: true, showHidden: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/tmp", "tmp:/", etags, options))
        options = { showDirectories: true, showHidden: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/cachefs", "cachefs:/", etags, options))
        options = { showDirectories: true, showHidden: true, fsCheck: true, staticFiles: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/common", "common:/", etags, options))
    #end if
    server.UsePostRouter(new Http.EtagMiddleware(etags))
end function
