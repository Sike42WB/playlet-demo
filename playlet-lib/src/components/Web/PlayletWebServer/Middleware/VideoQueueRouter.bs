import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"
import "pkg:/components/VideoQueue/VideoQueueUtils.bs"

namespace Http

    ' TODO:P0 validate all endpoints with web app
    class VideoQueueRouter extends HttpRouter

        function new(server as object)
            super()

            task = server.task
            m.videoQueueNode = task.videoQueue
            m.invidiousNode = task.invidious
            m.invidiousService = new Invidious.InvidiousService(m.invidiousNode)
        end function

        @get("/api/queue")
        function GetQueue(context as object) as boolean
            response = context.response

            queue = VideoQueueUtils.GetQueueDto(m.videoQueueNode)
            response.Json(queue)
            return true
        end function

        @post("/api/queue")
        function AddToQueue(context as object) as boolean
            request = context.request
            response = context.response

            payload = request.Json()
            if payload = invalid
                response.Default(400, `Invalid JSON payload`)
                return true
            end if

            videoId = payload.videoId
            playlistId = payload.playlistId
            if StringUtils.IsNullOrEmpty(videoId) and StringUtils.IsNullOrEmpty(playlistId)
                response.Default(400, `Missing "videoId" or "playlistId" in payload`)
                return true
            end if

            instance = m.invidiousService.GetInstance()

            contentNode = InvidiousContent.ToRowCellContentNode(payload, instance)
            m.playQueueNode@.AddToQueue(contentNode)

            queue = VideoQueueUtils.GetQueueDto(m.videoQueueNode)
            response.Json(queue)
            return true
        end function

        @post("/api/queue/play")
        function Play(context as object) as boolean
            request = context.request
            response = context.response

            payload = request.Json()
            if payload = invalid
                response.Default(400, `Invalid JSON payload`)
                return true
            end if

            videoId = payload.videoId
            playlistId = payload.playlistId
            if StringUtils.IsNullOrEmpty(videoId) and StringUtils.IsNullOrEmpty(playlistId)
                response.Default(400, `Missing "videoId" or "playlistId" in payload`)
                return true
            end if

            if IsString(payload.timestamp)
                payload.timestamp = payload.timestamp.toInt()
            end if

            instance = m.invidiousService.GetInstance()

            contentNode = InvidiousContent.ToRowCellContentNode(payload, instance)
            playlistIndex = IsInt(payload.playlistIndex) ? payload.playlistIndex : -1
            if contentNode.type = "playlist" and playlistIndex = -1
                playlistIndex = 0
            end if

            'TODO:P1 play existing item by index instead of new item inserted
            m.playQueueNode@.Play(contentNode, playlistIndex)

            response.Default(204, "OK")
            return true
        end function

        @delete("/api/queue")
        function ClearQueue(context as object) as boolean
            response = context.response

            m.playQueueNode@.Clear()
            response.Default(204, "OK")
            return true
        end function

    end class

end namespace
