import "pkg:/components/Services/Innertube/InnertubeService.bs"

namespace Http

    class PlayletInvidiousBackendRouter extends HttpRouter

        function new()
            super()
        end function

        @get("/playlet-invidious-backend/authorize_token")
        function AuthorizeToken(context as object) as boolean
            response = context.response

            error = "Playlet built-in Invidious backend is not a real Invidious instance, and does not support accounts."
            response.Default(400, error)
            return true
        end function

        @get("/playlet-invidious-backend/api/v1/stats")
        function GetStats(context as object) as boolean
            response = context.response

            error = "Playlet built-in Invidious backend is not a real Invidious instance, and does not support stats."
            response.Default(400, error)
            return true
        end function

        @get("/playlet-invidious-backend/api/v1/trending")
        function GetTrending(context as object) as boolean
            request = context.request
            response = context.response

            feeds = InnertubeService.GetTrending({ type: request.query.type })
            if not IsArray(feeds) or feeds.Count() = 0
                response.Default(500, "Failed to get trending feed")
                return true
            end if

            response.Json(ValidArray(feeds[0].items))
            return true
        end function

        @get("/playlet-invidious-backend/api/v1/popular")
        function GetPopular(context as object) as boolean
            return m.GetTrending(context)
        end function

        @get("/playlet-invidious-backend/api/v1/search/suggestions")
        function GetSearchSuggestions(context as object) as boolean
            request = context.request
            response = context.response

            query = request.query.q

            suggestions = InnertubeService.SearchSuggestions(query)
            suggestions.query = query
            response.Json(suggestions)
            return true
        end function

        @get("/playlet-invidious-backend/api/v1/search")
        function GetSearch(context as object) as boolean
            request = context.request
            response = context.response

            query = request.query.q
            continuation = request.query.continuation

            searchFilters = {}
            sort = request.query.sort
            if not StringUtils.IsNullOrEmpty(sort)
                searchFilters.sort = sort
            end if
            date = request.query.date
            if not StringUtils.IsNullOrEmpty(date)
                searchFilters.date = date
            end if
            _type = request.query.type
            if not StringUtils.IsNullOrEmpty(_type)
                searchFilters.type = _type
            end if
            duration = request.query.duration
            if not StringUtils.IsNullOrEmpty(duration)
                searchFilters.duration = duration
            end if
            features = request.query.features
            if not StringUtils.IsNullOrEmpty(features)
                searchFilters.features = features.Split(",")
            end if

            options = {}
            if searchFilters.Count() > 0
                options.searchFilters = searchFilters
            end if
            if not StringUtils.IsNullOrEmpty(continuation)
                options.continuation = continuation
            end if

            feeds = InnertubeService.Search(query, options)
            if not IsArray(feeds) or feeds.Count() = 0
                response.Default(500, "Failed to search")
                return true
            end if

            response.Json(feeds[0])
            return true
        end function

        @get("/playlet-invidious-backend/api/v1/resolveurl")
        function ResolveUrl(context as object) as boolean
            request = context.request
            response = context.response

            url = request.query.url
            if StringUtils.IsNullOrEmpty(url)
                response.Default(400, "Missing 'url' query parameter")
                return true
            end if

            json = InnertubeService.ResolveUrl(url, response)
            if json = invalid
                response.Default(500, "Failed to resolve URL")
                return true
            end if

            endpoint = json["endpoint"]
            pageType = ValidString(ObjectUtils.Dig(endpoint, ["commandMetadata", "webCommandMetadata", "webPageType"]))
            if pageType = "WEB_PAGE_TYPE_UNKNOWN" or pageType = ""
                response.Default(400, "Unknown url")
                return true
            end if

            subEndpoint = endpoint["watchEndpoint"]
            if subEndpoint = invalid
                subEndpoint = endpoint["browseEndpoint"]
                if subEndpoint = invalid
                    subEndpoint = endpoint
                end if
            end if

            params = ObjectUtils.Dig(subEndpoint, ["params"])

            result = {
                "pageType": pageType
            }

            browseId = ObjectUtils.Dig(subEndpoint, ["browseId"])
            if not StringUtils.IsNullOrEmpty(browseId)
                result["ucid"] = browseId
            end if

            videoId = ObjectUtils.Dig(subEndpoint, ["videoId"])
            if not StringUtils.IsNullOrEmpty(videoId)
                result["videoId"] = videoId
            end if

            playlistId = ObjectUtils.Dig(subEndpoint, ["playlistId"])
            if not StringUtils.IsNullOrEmpty(playlistId)
                result["playlistId"] = playlistId
            end if

            startTimeSeconds = ObjectUtils.Dig(subEndpoint, ["startTimeSeconds"])
            if ValidInt(startTimeSeconds) > 0
                result["startTimeSeconds"] = startTimeSeconds
            end if

            if IsString(params)
                result["params"] = params
            end if

            response.Json(result)
            return true
        end function

        @get("*")
        function GetAll(context as object) as boolean
            request = context.request
            route = request.route

            if route.StartsWith("/playlet-invidious-backend/api/v1/videos/")
                return m.GetVideo(context)
            else if route.StartsWith("/playlet-invidious-backend/api/v1/playlists/")
                return m.GetPlaylist(context)
            else if route.StartsWith("/playlet-invidious-backend/api/v1/channels/")
                return m.GetChannel(context)
            end if

            return false
        end function

        function GetVideo(context as object) as boolean
            request = context.request
            response = context.response
            route = request.route

            videoId = route.Mid("/playlet-invidious-backend/api/v1/videos/".Len())

            playerResponse = InnertubeService.GetVideoMetadata(videoId)
            if not playerResponse.IsSuccess()
                response.Default(playerResponse.StatusCode(), playerResponse.ErrorMessage())
                return true
            end if

            response.Json(playerResponse.Json())
            return true
        end function

        function GetPlaylist(context as object) as boolean
            request = context.request
            response = context.response
            route = request.route

            playlistId = route.Mid("/playlet-invidious-backend/api/v1/playlists/".Len())

            options = {}
            continuation = request.query.continuation
            if not StringUtils.IsNullOrEmpty(continuation)
                options.continuation = continuation
            end if

            playlist = InnertubeService.GetPlaylist(playlistId, options)
            if playlist = invalid
                response.Default(500, "Failed to get playlist")
                return true
            end if

            index = request.query.index
            if not StringUtils.IsNullOrEmpty(index)
                index = index.ToInt()
                if index > 1
                    LogError("Playlet backend does not use playlist pagination (use continuation instead)")
                    playlist.videos = []
                end if
            end if

            response.Json(playlist)
            return true
        end function

        function GetChannel(context as object) as boolean
            request = context.request
            response = context.response
            route = request.route

            channelAndTab = route.Mid("/playlet-invidious-backend/api/v1/channels/".Len())
            channelAndTab = channelAndTab.Split("/")

            options = {}
            continuation = request.query.continuation

            if not StringUtils.IsNullOrEmpty(continuation)
                options.continuation = continuation
            end if

            if channelAndTab.Count() = 1
                channelId = channelAndTab[0]
                channel = InnertubeService.GetChannel(channelId, options)
                if channel = invalid
                    response.Default(500, "Failed to get channel")
                    return true
                end if

                response.Json(channel)
                return true
            else if channelAndTab.Count() = 2
                channelId = channelAndTab[0]
                _tab = channelAndTab[1]

                params = request.query.params
                if not StringUtils.IsNullOrEmpty(params)
                    options.params = params
                end if

                channel = InnertubeService.GetChannel(channelId, options)
                if channel = invalid
                    response.Default(500, "Failed to get channel")
                    return true
                end if

                if _tab = "playlists" or _tab = "podcasts" or _tab = "releases"
                    result = {
                        "playlists": channel.items
                    }
                    if channel.DoesExist("continuation")
                        result.continuation = channel.continuation
                    end if
                    response.Json(result)
                else
                    result = {
                        "videos": channel.items
                    }
                    if channel.DoesExist("continuation")
                        result.continuation = channel.continuation
                    end if
                    response.Json(result)
                end if

                return true
            end if

            return false
        end function
    end class

end namespace
