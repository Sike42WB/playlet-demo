import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/source/utils/MathUtils.bs"

namespace Http

    const WATCH_HISTORY_PAGE_SIZE = 5

    class WatchHistoryRouter extends HttpRouter

        function new()
            super()

            m.Get("/api/watch-history", function(context as object) as boolean
                request = context.request
                response = context.response
                router = context.router
                task = context.server.task
                invidiousNode = task.invidious

                page = 1
                if not StringUtils.IsNullOrEmpty(request.query.page)
                    page = request.query.page.ToInt()
                    page = MathUtils.Max(page, 1)
                end if

                service = new Invidious.InvidiousService(invidiousNode)

                historyResponse = service.GetWatchHistory(page, WATCH_HISTORY_PAGE_SIZE)
                if not historyResponse.IsSuccess()
                    response.http_code = historyResponse.StatusCode()
                    response.SetBodyDataString(response.ErrorMessage())
                    response.ContentType("text/plain")
                    return true
                end if

                videoIds = historyResponse.Json()
                if not IsArray(videoIds)
                    response.http_code = 500
                    response.SetBodyDataString("Invalid response from Invidious")
                    response.ContentType("text/plain")
                    return true
                end if

                if videoIds.Count() = 0
                    response.Json([])
                    return true
                end if

                instance = service.GetInstance()

                videoRequests = []
                for each videoId in videoIds
                    videoRequests.push(router.GetVideoMetadata(instance, videoId))
                end for

                videoResponses = []
                for each videoRequest in videoRequests
                    videoResponses.push(videoRequest.Await())
                end for

                videos = []
                for each videoResponse in videoResponses
                    if videoResponse.StatusCode() = 200
                        videoInfo = videoResponse.Json()
                        videoInfo.type = "video"
                        ' Remove unnecessary fields, keep payload small
                        videoInfo.Delete("adaptiveFormats")
                        videoInfo.Delete("formatStreams")
                        videoInfo.Delete("storyboards")
                        videoInfo.Delete("recommendedVideos")
                        videos.push(videoInfo)
                    end if
                end for

                response.Json(videos)
                return true
            end function)
        end function

        ' TODO:P2 refactor this, since it's similar to continue watching router
        function GetVideoMetadata(instance as string, videoId as string, cancellation = invalid as object) as object
            ' _playlet_ref=video_info so that we give it it's own cache that lasts longer
            url = `${instance}${Invidious.VIDEOS_ENDPOINT}/${videoId}?_playlet_ref=video_info`

            request = HttpClient.Get(url)
            ' 3 days of cache
            request.CacheSeconds(60 * 60 * 24 * 3)
            request.Cancellation(cancellation)
            ' Since we're doing multiple requests from the same thread, we might
            ' benefit from HTTP/2 connection sharing
            request.UseHttp2()

            ' Send, and not await, since we are launching many requests at once
            return request.Send()
        end function

    end class

end namespace
