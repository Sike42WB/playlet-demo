import "pkg:/source/utils/StringUtils.bs"

namespace Http

    class HttpStaticFilesRouter extends HttpRouter
        private log as log.Logger

        private root
        private route
        private showDirectories
        private showHidden
        private fsCheck

        function new(route as string, root as string, showDirectories = false as boolean, showHidden = false as boolean, fsCheck = true as boolean)
            super()
            m.log = new log.Logger("HttpStaticFilesRouter")

            m.root = root
            m.route = route
            m.showDirectories = showDirectories
            m.showHidden = showHidden
            m.fsCheck = fsCheck

            m.Get("*", function(context as object) as boolean
                router = context.router
                request = context.request
                response = context.response

                if not request.route.StartsWith(router.route)
                    return false
                end if

                path_in_route = request.route.Mid(router.route.Len())

                decoded_path = path_in_route.DecodeUri()
                full_path = StringUtils.PathJoin(router.root, decoded_path)

                if not router.fsCheck
                    ' libpkg:/ does not work with roFilesystem...
                    buffer = createObject("roByteArray")
                    if buffer.ReadFile(full_path) and buffer.count() > 0
                        mimetype = WebUtils.MimeType(decoded_path)
                        response.SetBodyDataBuffer(buffer)
                        response.ContentType(mimetype)
                        response.http_code = 200
                        response.source = Http.HttpResponseSource.GENERATED
                        return true
                    end if
                end if

                path = CreateObject("roPath", full_path)
                fs = CreateObject("roFilesystem")

                if not path.isValid()
                    ' Skip, let next middleware handle it
                    return false
                else if not fs.exists(path)
                    ' Skip, let next middleware handle it
                    return false
                end if

                stat = fs.stat(path)
                if stat = invalid
                    response.Default(500, "fstat() failed.")
                    return true
                end if

                if stat.type = "directory"
                    if not router.showDirectories
                        response.Default(403, "Forbidden")
                        return true
                    end if
                    response.ContentType("text/html")
                    router.GenerateDirectoryListing(path, router, request, response)
                    return true
                else if stat.type = "file"
                    mimetype = WebUtils.MimeType(decoded_path)
                    response.ContentType(mimetype)
                    response.fileLength = stat.size
                    router.log.info(`uri=${request.uri}, target=${path}, content-type=${mimetype}, content-length=${response.fileLength}`)
                    router.GenerateFile(path, router, request, response)
                    return true
                else
                    response.Default(403, "Not a regular file.")
                    return true
                end if
            end function)
        end function

        function GenerateFile(path as object, router as object, request as HttpRequest, response as HttpResponse) as boolean
            response.path = path
            response.source = Http.HttpResponseSource.FROMFILE
            fileFinish = response.fileLength - 1

            if request.range_begin_given or request.range_end_given
                start = 0
                finish = 0
                if request.range_begin_given and request.range_end_given
                    ' 100-200
                    start = request.range_begin
                    finish = request.range_end
                    ' clamp finish to fileFinish
                    if finish > fileFinish
                        finish = fileFinish
                    end if
                else if request.range_begin_given and not request.range_end_given
                    ' 100- :: yields 100 to end
                    start = request.range_begin
                    finish = fileFinish
                else if not request.range_begin_given and request.range_end_given
                    ' -200 :: yields last 200
                    finish = fileFinish
                    start = finish - request.range_end + 1
                    ' check for wrapping
                    if start > finish
                        start = 0
                    end if
                else
                    router.log.error(1, "internal error - range start/finish logic inconsistency")
                end if

                response.start = start
                response.body_buffer_length = finish - start + 1
                response.ContentLength(response.body_buffer_length)
                response.headers["Content-Range"] = "bytes " + response.MakeRange(response.start, response.body_buffer_length, response.filelength)
                response.http_code = 206

                router.log.info("sending range " + response.MakeRange(start, response.body_buffer_length, response.fileLength))
            else ' no range stuff
                response.body_buffer_length = response.fileLength
                response.ContentLength(response.body_buffer_length)
                response.http_code = 200
            end if

            response.headers["Accept-Ranges"] = "bytes"
            response.KeepAlive(true)
            return true
        end function

        function GenerateDirectoryListing(path as object, router as object, request as HttpRequest, response as HttpResponse) as boolean
            fs = CreateObject("roFilesystem")
            dirList = fs.GetDirectoryListing(path)
            if dirList = invalid
                response.default(500, "Couldn't list directory")
                return false
            end if

            ' for tabbed alignment of file sizes
            maxlen = 0
            for each item in dirList
                il = item.len()
                if maxlen < il
                    maxlen = il
                end if
            end for

            listing = `<html>
            <head>
                <title>${response.settings.ServerName}</title>
            </head>
            <body>
                <h1>${request.uri.DecodeUri()}</h1>
                <tt><pre>\n`

            dir = path.getString()
            if dir.len() > 0 and dir.right(1) <> "/"
                dir = dir + "/"
            end if
            uriDir = request.uri
            if uriDir.len() > 0 and uriDir.right(1) <> "/"
                uriDir = uriDir + "/"
            end if

            routeDir = router.route
            if routeDir.len() > 0 and routeDir.right(1) <> "/"
                routeDir = routeDir + "/"
            end if

            if not uriDir = routeDir
                uri = uriDir + ".."
                listing += `<a href="${uri}">..</a>\n`
            end if

            for each item in dirList
                if router.showHidden or item.left(1) <> "."
                    indicator = invalid
                    stat = fs.stat(dir + item)
                    if stat <> invalid
                        if stat.doesexist("type") and stat.type = "directory"
                            indicator = "/"
                        else if stat.doesexist("size")
                            indicator = string(maxlen - item.len(), " ") + Stri(stat.size)
                        end if
                    end if
                    if indicator <> invalid
                        uri = uriDir + item
                        safe_url = uri ' UrlEncode(uri) ' too much encoding
                        listing += `<a href="${safe_url}">${item}${indicator}</a>\n`
                    else
                        router.log.warn("insufficient stat info to include '" + dir + item + "'")
                    end if
                end if
            end for

            listing += `</pre></tt><hr>${response.GeneratedBy()}</body></html>`

            response.SetBodyDataString(listing)
            response.http_code = 200
            response.KeepAlive(true)
            response.source = Http.HttpResponseSource.GENERATED
            return true
        end function
    end class

end namespace
