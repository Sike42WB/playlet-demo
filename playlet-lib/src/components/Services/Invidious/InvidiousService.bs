import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/TimeUtils.bs"
import "pkg:/source/utils/CryptoUtils.bs"
import "pkg:/source/services/HttpClient.bs"
import "pkg:/source/roku_modules/log/LogMixin.brs"

namespace Invidious
    const DEFAULT_INSTANCE = "https://vid.puffyan.us"

    const TOKEN_CALLBACK = "/invidious/token_callback"

    const VIDEOS_ENDPOINT = "/api/v1/videos"
    const HISTORY_ENDPOINT = "/api/v1/auth/history"

    const SEARCH_SUGGEST_ENDPOINT = "/api/v1/search/suggestions"
    const SEARCH_ENDPOINT = "/api/v1/search"

    const AUTH_SCOPES = "GET:feed,GET:playlists,POST:tokens/register,POST:tokens/unregister,POST:history*"
    const AUTH_FEED = "/api/v1/auth/feed"
    const AUTH_PLAYLISTS = "/api/v1/auth/playlists"
    const AUTH_TOKENS_UNREGISTER = "/api/v1/auth/tokens/unregister"
    const AUTH_TOKENS_REGISTER = "/api/v1/auth/tokens/register"

    const TOKEN_TIMESPAN = 60 * 60 * 24 * 365 * 2 '2 years

    class InvidiousService
        public node as object

        function new(node as object)
            m.log = new log.Logger("InvidiousService")

            m.node = node
            ' TODO:P2 api definitions are not needed everytime, move them to a separate function and lazy load
            apiDefinitions = node.apiDefinitions

            m.endpoints = {}

            for each apiDefinition in apiDefinitions.endpoints
                m.endpoints[apiDefinition.name] = apiDefinition
            end for

            m.responseHanlders = {
                DefaultHandler: m.DefaultHandler,
                AuthFeedHandler: m.AuthFeedHandler
            }
        end function

        function DefaultQueryParams() as object
            return {
                region: m.node.applicationInfo@.GetUserCountryCode(invalid)
            }
        end function

        function GetAuthenticationHeaders(token as string) as object
            return {
                "Authorization": `Bearer ${token}`
            }
        end function

        function GetInstance() as string
            instance = m.node.preferences["invidious.instance"]
            if not StringUtils.IsNullOrEmpty(instance)
                return instance
            end if

            return DEFAULT_INSTANCE
        end function

        function MarkVideoWatched(videoId as dynamic) as void
            if StringUtils.IsNullOrEmpty(videoId)
                return
            end if

            authToken = m.node.authToken
            if authToken = invalid
                return
            end if

            url = `${authToken.instance}${Invidious.HISTORY_ENDPOINT}/${videoId}`
            request = HttpClient.Post(url, "")
            request.Headers(m.GetAuthenticationHeaders(authToken.token))
            request.SendAndForget()
        end function

        function SearchSuggestions(q as string, cancellation = invalid as object) as object
            instance = m.GetInstance()
            url = `${instance}${Invidious.SEARCH_SUGGEST_ENDPOINT}`

            request = HttpClient.Get(url)
            request.QueryParams(m.DefaultQueryParams())
            request.QueryParam("q", q)
            request.CacheSeconds(60 * 60 * 6)' 6 hours

            request.Cancellation(cancellation)

            response = request.Await()
            ' TODO:P0 return error if status code is not 200
            return response.Json()
        end function

        function Search(q as string, args = invalid as dynamic, cancellation = invalid as object) as object
            instance = m.GetInstance()
            url = `${instance}${Invidious.SEARCH_ENDPOINT}`

            request = HttpClient.Get(url)
            request.QueryParams(m.DefaultQueryParams())
            request.QueryParam("q", q)

            if IsArray(args.features)
                args.features = args.features.join(",")
            end if
            request.QueryParams(args)

            request.Cancellation(cancellation)

            response = request.Await()
            return response.Json()
        end function

        function GetVideoMetadata(videoId as string) as object
            instance = m.GetInstance()
            url = `${instance}${Invidious.VIDEOS_ENDPOINT}/${videoId}`

            request = HttpClient.Get(url)
            request.QueryParams(m.DefaultQueryParams())
            request.CacheSeconds(60 * 60 * 6)' 6 hours

            return request.Await()
        end function

        function GetVideoStreamUrl(videoId as string) as string
            instance = m.GetInstance()
            return `${instance}/latest_version?id=${videoId}`
        end function

        function MakeRequest(requestData as object) as object
            endpoint = m.endpoints[requestData.endpoint]
            if endpoint = invalid
                return invalid
            end if

            instance = m.GetInstance()

            request = HttpClient.Get(instance + endpoint.url)

            if endpoint.authenticated = true
                authToken = m.node.authToken
                if authToken = invalid
                    return invalid
                end if
                request.Url(authToken.instance + endpoint.url)
                request.Headers(m.GetAuthenticationHeaders(authToken.token))
            end if

            if endpoint.queryParams <> invalid
                for each queryParamKey in endpoint.queryParams
                    queryParam = endpoint.queryParams[queryParamKey]
                    if queryParam.default <> invalid
                        if queryParam.type = "string"
                            request.QueryParam(queryParamKey, queryParam.default)
                        else if queryParam.type = "#ISO3166"
                            if queryParam.default = "GetUserCountryCode"
                                request.QueryParam(queryParamKey, m.node.applicationInfo@.GetUserCountryCode(invalid))
                            else
                                request.QueryParam(queryParamKey, queryParam.default)
                            end if
                        end if
                    end if
                end for
            end if

            if requestData.queryParams <> invalid
                request.QueryParams(requestData.queryParams)
            end if

            if requestData.pathParams <> invalid
                request.PathParams(requestData.pathParams)
            end if

            ' TODO:P0 error handling
            response = request.Await()

            responseHandler = endpoint.responseHandler <> invalid ? m.responseHanlders[endpoint.responseHandler] : m.responseHanlders["DefaultHandler"]

            result = responseHandler(m, requestData, response)

            if result <> invalid and endpoint.authenticated = true
                ' Cache response for use by web app
                m.CacheResponse(requestData, result)
            end if

            return result
        end function

        function CacheResponse(requestData as object, result as object)
            cacheKey = FormatJson(requestData)
            cacheKey = CryptoUtils.GetMd5(cacheKey)
            value = FormatJson(result)
            WriteAsciiFile(`tmp:/${cacheKey}.json`, value)
        end function

        function DefaultHandler(m as object, requestData as object, response as object) as object
            return response.Json()
        end function

        function AuthFeedHandler(m as object, requestData as object, response as object) as object
            m.DeleteExpiredToken(response)

            if response.StatusCode() = 200
                json = response.Json()
                videos = []
                videos.Append(json.notifications)
                videos.Append(json.videos)
                return videos
            end if
            return invalid
        end function

        function DeleteExpiredToken(response as object)
            if response.StatusCode() = 403
                m.log.warn(`Invidious instance responded with 403: ${response.Text()}`)
                m.log.warn("Deleting Invidious token...")
                m.DeleteAuthToken()
            end if
        end function

        function GetAuthToken() as object
            tokenPayload = RegistryUtils.Read(RegistryUtils.INVIDIOUS_TOKEN)
            if tokenPayload = invalid
                return invalid
            end if
            authData = ParseJson(tokenPayload)
            if authData = invalid or authData.instance = invalid or authData.token = invalid
                RegistryUtils.Delete(RegistryUtils.INVIDIOUS_TOKEN)
                return invalid
            end if
            return authData
        end function

        function SetAuthToken(token as string, instance as string, username as dynamic, scopes as dynamic, expire as dynamic)
            obj = {
                token: token,
                instance: instance
            }
            if username <> invalid
                obj.username = username
            end if
            if scopes <> invalid
                obj.scopes = scopes
            end if
            if expire <> invalid
                obj.expire = expire
            end if

            json = FormatJson(obj)
            RegistryUtils.Write(RegistryUtils.INVIDIOUS_TOKEN, json)

            m.node.authToken = obj
        end function

        function DeleteAuthToken()
            m.node.authToken = invalid
            RegistryUtils.Delete(RegistryUtils.INVIDIOUS_TOKEN)
        end function

        function Logout() as boolean
            authToken = m.node.authToken
            if authToken = invalid
                return false
            end if

            m.UnregisterToken(authToken)
            m.DeleteAuthToken()
            return true
        end function

        function UnregisterToken(authToken as object) as void
            url = `${authToken.instance}${Invidious.AUTH_TOKENS_UNREGISTER}`

            request = HttpClient.Post(url, authToken.token)
            request.Headers(m.GetAuthenticationHeaders(authToken.token))
            request.Header("Content-Type", "application/json")

            request.SendAndForget()
        end function

        function GetAuthorizeTokenLink() as dynamic
            instance = m.GetInstance()
            ' Make sure the host is not on https, because https cannot redirect to http, which is our local server
            invidiousHost = instance.Replace("https://", "http://")

            address = m.node.webServer@.GetServerAddress()
            if address = invalid
                return invalid
            end if

            expire = TimeUtils.Now().AsSeconds() + Invidious.TOKEN_TIMESPAN

            'TODO:P0 scope and expire in the callback
            callbackUrl = `${address}${Invidious.TOKEN_CALLBACK}?ref=${instance}`.EncodeUriComponent()
            scope = `${Invidious.AUTH_SCOPES}`.EncodeUriComponent()
            return `${invidiousHost}/authorize_token?scopes=${scope}&callback_url=${callbackUrl}&expire=${expire}`
        end function
    end class

end namespace
