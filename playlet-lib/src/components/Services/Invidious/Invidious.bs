import "InvidiousService.bs"
import "pkg:/source/AsyncTask/AsyncTask.bs"
import "pkg:/source/AsyncTask/Tasks.bs"

function Init()
    apiDefinitions = LoadApiDefinition("libpkg:/config/invidious_video_api.yaml", "Invidious")
    apiDefinitions.Append(LoadApiDefinition("libpkg:/config/local_video_api.yaml", "Local"))
    m.top.apiDefinitions = apiDefinitions
    m.service = new Invidious.InvidiousService(m.top)
    m.top.authToken = m.service.GetAuthToken()
end function

function LoadApiDefinition(path as string, apiType as string) as object
    apiDefinitions = ParseJson(ReadAsciiFile(path))
    for each key in apiDefinitions
        apiDefinitions[key].apiType = apiType
    end for
    return apiDefinitions
end function

function GetCurrentInstance(_unused as dynamic) as string
    return m.service.GetInstance()
end function

function GetAuthorizeTokenLink(_unused as dynamic) as dynamic
    return m.service.GetAuthorizeTokenLink()
end function

function SetAuthToken(token as string, instance as string, username as dynamic)
    m.service.SetAuthToken(token, instance, username)
end function

function OnAuthTokenChange() as void
    m.top.refreshSubscribtions = true
end function

function GetSubscriptions() as void
    if m.subscriptionsTask <> invalid
        m.subscriptionsTask.cancel = true
    end if
    if m.top.authToken = invalid
        m.top.subscriptions = invalid
        return
    end if
    m.subscriptionsTask = AsyncTask.Start(Tasks.InvidiousSubscriptionsTask, { invidious: m.top })
end function
