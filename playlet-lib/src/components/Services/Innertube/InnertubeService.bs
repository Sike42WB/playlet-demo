import "pkg:/components/Services/Innertube/BrowseEndpoint.bs"
import "pkg:/components/Services/Innertube/Constants.bs"
import "pkg:/components/Services/Innertube/Context.bs"
import "pkg:/components/Services/Innertube/NextEndpoint.bs"
import "pkg:/components/Services/Innertube/PlayerEndpoint.bs"
import "pkg:/components/Services/Innertube/Search.bs"
import "pkg:/source/services/HttpClient.bs"
import "pkg:/source/utils/ObjectUtils.bs"
import "pkg:/source/utils/TimeUtils.bs"

namespace InnertubeService

    function GetVideoMetadata(videoId as string, options = invalid as object) as object
        cancellation = invalid
        fetchNext = true
        ctt = ""

        if options <> invalid
            if options.DoesExist("cancellation")
                cancellation = options.cancellation
            end if
            if options.DoesExist("fetchNext")
                fetchNext = options.fetchNext
            end if
            if options.DoesExist("ctt")
                ctt = options.ctt
            end if
        end if

        playerRequest = Innertube.CreatePlayerRequest(videoId, ctt)
        playerRequest.Cancellation(cancellation)
        playerRequest.Send()

        nextRequest = invalid
        nextResponse = invalid
        if fetchNext
            nextRequest = Innertube.CreateNextRequest(videoId, ctt)
            nextRequest.Cancellation(cancellation)
            nextRequest.Send()
        end if

        playerResponse = playerRequest.Await()
        if not playerResponse.IsSuccess()
            return playerResponse
        end if

        if fetchNext
            nextResponse = nextRequest.Await()
        end if

        parsedResponse = Innertube.ParseInnertubePlayerResponse(playerResponse.Json())

        if fetchNext
            parsedResponse = Innertube.ParseInnertubeNextResponse(nextResponse.Json(), parsedResponse)
        end if

        if parsedResponse <> invalid
            if parsedResponse.Success
                playerResponse.OverrideJson(parsedResponse.Metadata)
            else
                playerResponse.OverrideStatusCode(500)
                playerResponse.OverrideErrorMessage(parsedResponse.Error)
            end if
        end if

        return playerResponse
    end function

    function Search(query as string, cancellation = invalid as object) as object
        return Innertube.Search(query, cancellation)
    end function

    function SearchSuggestions(q as string, cancellation = invalid as object) as object
        suggestions = Innertube.SearchSuggestions(q, cancellation)
        if suggestions = invalid
            suggestions = []
        end if

        return {
            suggestions: suggestions
        }
    end function

    function GetTrending(options = invalid as object) as object
        cancellation = invalid
        params = ""

        if options <> invalid
            if options.DoesExist("cancellation")
                cancellation = options.cancellation
            end if
            if options.DoesExist("type")
                trendingType = options.type

                if trendingType = "music"
                    params = "4gINGgt5dG1hX2NoYXJ0cw%3D%3D"
                else if trendingType = "gaming"
                    params = "4gIcGhpnYW1pbmdfY29ycHVzX21vc3RfcG9wdWxhcg%3D%3D"
                else if trendingType = "movies"
                    params = "4gIKGgh0cmFpbGVycw%3D%3D"
                end if
            end if
        end if

        request = Innertube.CreateBrowseRequest("FEtrending", params)
        request.Cancellation(cancellation)

        response = request.Await()
        if not response.IsSuccess()
            return invalid
        end if

        json = response.Json()
        return Innertube.ParseResponse(json)
    end function

    function GetChannelInfo(channelId as string, options = invalid as object) as object
        cancellation = invalid

        if options <> invalid
            if options.DoesExist("cancellation")
                cancellation = options.cancellation
            end if
        end if

        request = Innertube.CreateBrowseRequest(channelId, "")
        request.Cancellation(cancellation)

        response = request.Await()
        if not response.IsSuccess()
            return invalid
        end if

        json = response.Json()
        return Innertube.ParseChannelResponse(json)
    end function
end namespace
