' TODO:P0
' - ProfileView on profile select:
'   - Profile info
'   - Logout / delete profile
'   - Change color
' - Web apis for profile /api/profiles
' - Migrate existing profiles from old format
' - Web app changes:
'  - Profile selection (list/selected/logout)
'  - Login with profile
import "pkg:/source/utils/ArrayUtils.bs"
import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/Logging.bs"

function Init()
    content = m.top.findNode("ProfilesContent")
    m.top.content = content
    m.profilesContent = content.getChild(0)
end function

function OnNodeReady()
    LoadProfilesFromRegistry()
end function

function LoadProfilesFromRegistry()
    ' Step 1: Load user profiles from registry
    userProfiles = RegistryUtils.Read(RegistryUtils.USER_PROFILES)

    if userProfiles = invalid
        userProfiles = {
            profiles: []
            currentProfileIndex: -1
        }
    else
        userProfiles = ParseJson(userProfiles)
    end if

    ' Step 2: Migrate existing profiles to new format (if needed)
    isDirty = MigrateExistingProfiles(userProfiles)

    profileNodes = []
    for each profile in userProfiles.profiles
        profileNode = CreateObject("roSGNode", "ProfileContentNode")
        profileNode.type = profile.type
        profileNode.username = profile.username
        profileNode.serverUrl = profile.serverUrl
        profileNode.accessToken = profile.accessToken

        profileNodes.Push(profileNode)
    end for

    m.profilesContent.insertChildren(profileNodes, 0)

    if userProfiles.currentProfileIndex >= 0 and userProfiles.currentProfileIndex < profileNodes.Count() - 1
        m.top.currentProfile = profileNodes[userProfiles.currentProfileIndex]
    end if

    ' Step 3: Save user preferences (if needed)
    if isDirty
        SaveUserProfilesToRegistry()
    end if
end function

function MigrateExistingProfiles(userProfiles as object) as boolean
    ' TODO:P0
    ' read RegistryUtils.Read(RegistryUtils.INVIDIOUS_TOKEN)
    ' copy the profile from there to the new format
    ' delete the old registry key
    ' if no current profile, set the first profile as current
    return false
end function

function SaveUserProfilesToRegistry()
    userProfiles = {
        profiles: []
        currentProfileIndex: -1
    }

    profileNodes = m.profilesContent.getChildren(-1, 0)

    for each profileNode in profileNodes
        if profileNode.type = "login"
            continue for
        end if

        profile = {
            type: profileNode.type
            username: profileNode.username
            serverUrl: profileNode.serverUrl
            accessToken: profileNode.accessToken
        }
        userProfiles.profiles.Push(profile)
    end for

    userProfiles.currentProfileIndex = ArrayUtils.IndexOfNode(profileNodes, m.top.currentProfile)

    userProfiles.__version = m.top.__version
    RegistryUtils.Write(RegistryUtils.USER_PROFILES, FormatJson(userProfiles))
end function

function OnLoginWithProfile()
    isNewProfile = true
    newProfile = m.top.loginWithProfile
    existingProfile = invalid
    profiles = m.profilesContent.getChildren(-1, 0)
    for each profile in profiles
        if profile.username = newProfile.username and profile.serverUrl = newProfile.serverUrl
            existingProfile = profile
            isNewProfile = false
            exit for
        end if
    end for

    if not isNewProfile
        existingProfile.accessToken = newProfile.accessToken
        newProfile = existingProfile
    end if

    if isNewProfile
        m.profilesContent.insertChild(newProfile, 0)
    end if

    m.top.currentProfile = newProfile
end function

function OnCurrentProfile() as void
    currentProfile = m.top.currentProfile
    allProfiles = m.profilesContent.getChildren(-1, 0)
    if currentProfile = invalid
        for each profile in allProfiles
            profile.isSelected = false
        end for
        m.invidious.authToken = invalid
        LogInfo("Current profile set to invalid.")
        SaveUserProfilesToRegistry()
        return
    end if

    for each profile in allProfiles
        profile.isSelected = currentProfile.isSameNode(profile)
    end for

    m.invidious.authToken = {
        token: currentProfile.accessToken
        instance: currentProfile.serverUrl
        username: currentProfile.username
    }
    LogInfo("Current profile set to", currentProfile.username, "@", currentProfile.serverUrl)
    SaveUserProfilesToRegistry()
end function
