' TODO:P0
' - ProfileView on profile select:
'   - Profile info
'   - Logout / delete profile
'   - Change color
' - Web apis for profile /api/profiles
' - Web app changes:
'  - Profile selection (list/selected/logout)
'  - Login with profile
import "pkg:/source/utils/ArrayUtils.bs"
import "pkg:/source/utils/CryptoUtils.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/StringUtils.bs"

function Init()
    m.disableSavingToRegistry = false
    content = m.top.findNode("ProfilesContent")
    m.top.content = content
    m.profilesContent = content.getChild(0)
end function

function OnNodeReady()
    LoadProfilesFromRegistry()
end function

function LoadProfilesFromRegistry()
    ' Step 1: Load user profiles from registry
    userProfiles = RegistryUtils.Read(RegistryUtils.USER_PROFILES)

    if userProfiles = invalid
        userProfiles = {
            profiles: []
            currentProfile: invalid
        }
    else
        userProfiles = ParseJson(userProfiles)
    end if

    ' Step 2: Migrate existing profiles to new format (if needed)
    isDirty = MigrateExistingProfiles(userProfiles)

    ' Step 3: Save user preferences (if needed)
    if isDirty
        SaveUserProfilesToRegistry()
    end if

    ' Step 4: Load user profiles into content nodes
    profileNodes = []
    for each profile in userProfiles.profiles
        profileNode = CreateObject("roSGNode", "ProfileContentNode")
        profileNode.id = profile.id
        profileNode.type = profile.type
        profileNode.username = profile.username
        profileNode.serverUrl = profile.serverUrl
        profileNode.accessToken = profile.accessToken

        profileNodes.Push(profileNode)
    end for

    m.profilesContent.insertChildren(profileNodes, 0)

    if not StringUtils.IsNullOrEmpty(userProfiles.currentProfile)
        for each profileNode in profileNodes
            if profileNode.id = userProfiles.currentProfile
                ' Setting current profile will also save the profiles to registry
                ' but we just saved the profiles
                m.disableSavingToRegistry = true
                m.top.currentProfile = profileNode
                m.disableSavingToRegistry = false
                exit for
            end if
        end for
    end if
end function

function MigrateExistingProfiles(userProfiles as object) as boolean
    tokenPayload = RegistryUtils.Read(RegistryUtils.INVIDIOUS_TOKEN)
    if tokenPayload = invalid
        return false
    end if

    authToken = ParseJson(tokenPayload)
    RegistryUtils.Delete(RegistryUtils.INVIDIOUS_TOKEN)

    if authToken = invalid or authToken.instance = invalid or authToken.token = invalid or authToken.username = invalid
        return false
    end if

    id = CreateProfileId(authToken.username, authToken.instance)
    for each profile in userProfiles.profiles
        if profile.id = id
            return false
        end if
    end for

    profile = {
        "id": CreateProfileId(authToken.username, authToken.instance)
        "type": "invidious"
        "username": authToken.username
        "serverUrl": authToken.instance
        "accessToken": authToken.token
    }

    userProfiles.profiles.Unshift(profile)
    if StringUtils.IsNullOrEmpty(userProfiles["currentProfile"])
        userProfiles["currentProfile"] = profile.id
    end if

    return true
end function

function SaveUserProfilesToRegistry() as void
    if m.disableSavingToRegistry
        return
    end if

    userProfiles = GetProfilesDTO(true)

    userProfiles.__version = m.top.__version
    RegistryUtils.Write(RegistryUtils.USER_PROFILES, FormatJson(userProfiles))
end function

function GetProfilesDTO(includeAccessToken as boolean) as object
    userProfiles = {
        "profiles": []
        "currentProfile": invalid
    }

    profileNodes = m.profilesContent.getChildren(-1, 0)

    for each profileNode in profileNodes
        if profileNode.type = "login"
            continue for
        end if

        profile = {
            "id": profileNode.id
            "type": profileNode.type
            "username": profileNode.username
            "serverUrl": profileNode.serverUrl
        }

        if includeAccessToken
            profile["accessToken"] = profileNode.accessToken
        end if

        userProfiles.profiles.Push(profile)
    end for

    currentProfile = m.top.currentProfile
    if currentProfile <> invalid
        userProfiles["currentProfile"] = currentProfile.id
    end if

    return userProfiles
end function

function OnLoginWithProfile()
    isNewProfile = true
    newProfile = m.top.loginWithProfile
    existingProfile = invalid
    profiles = m.profilesContent.getChildren(-1, 0)
    for each profile in profiles
        if profile.username = newProfile.username and profile.serverUrl = newProfile.serverUrl
            existingProfile = profile
            isNewProfile = false
            exit for
        end if
    end for

    if not isNewProfile
        existingProfile.accessToken = newProfile.accessToken
        newProfile = existingProfile
    end if

    if isNewProfile
        newProfile.id = CreateProfileId(newProfile.username, newProfile.serverUrl)
        m.profilesContent.insertChild(newProfile, 0)
    end if

    m.top.currentProfile = newProfile
end function

function OnCurrentProfile() as void
    currentProfile = m.top.currentProfile
    allProfiles = m.profilesContent.getChildren(-1, 0)
    if currentProfile = invalid
        for each profile in allProfiles
            profile.isSelected = false
        end for
        m.invidious.authToken = invalid
        LogInfo("Current profile set to invalid.")
        SaveUserProfilesToRegistry()
        return
    end if

    for each profile in allProfiles
        profile.isSelected = currentProfile.isSameNode(profile)
    end for

    m.invidious.authToken = {
        token: currentProfile.accessToken
        instance: currentProfile.serverUrl
        username: currentProfile.username
    }
    LogInfo("Current profile set to", currentProfile.username, "@", currentProfile.serverUrl)
    SaveUserProfilesToRegistry()
end function

function CreateProfileId(username as string, serverUrl as string) as string
    return "v1:" + CryptoUtils.GetMd5(username + serverUrl)
end function
