import "pkg:/components/parts/AutoBind/OnNodeReadyNoOp.bs"
import "pkg:/components/Services/LoungeService/LoungeApi.bs"
' TODO:P0
' 2. Only create a lounge when the first device connects
'   - Also create a lounge when the tv code is generated
' 3. Cache the lounge token to registry
' 4. Add a way to refresh the lounge token
' 5. Add a way to leave the lounge
' 6. Add connected remotes count
' 7. Only send player events when we have connected remotes
' 8. Handle rpc commands
'   - loungeStatus => restore connected remotes
'   - remoteConnected
'   - remoteDisconnected
'   - setPlaylist
'   - updatePlaylist
'   - next => has no args
'   - previous => has no args
'   - setVolume
'   - setAutoplayMode
' 9. Double check params for all bind commands
'   - capabilities, v, t, app, AID, zx, RID
' 10. Handle adding to the queue (with notification)
' 11. Handle onHasPreviousNextChanged properly based on queue
' 12. Add a section about the lounge in the privacy policy

function Init()
    m.top.functionName = "LoungeServiceLoop"

    deviceInfo = CreateObject("roDeviceInfo")
    m.top.deviceId = deviceInfo.GetChannelClientId()
    deviceFriendlyName = deviceInfo.GetFriendlyName()
    if StringUtils.IsNullOrEmpty(deviceFriendlyName)
        deviceFriendlyName = "TV"
    end if
    m.top.deviceName = "Playlet on " + deviceFriendlyName
end function

function StartService(_unused as dynamic) as boolean
    if m.top.isRunning = true
        return true
    end if

    m.top.control = "run"
    return true
end function

function StopService(_unused as dynamic) as void
    if m.top.isRunning = false
        return
    end if

    m.top.shouldQuit = true
end function

function LoungeServiceLoop()
    messagePort = CreateObject("roMessagePort")
    api = new LoungeApi(m.top, m.top.playQueue)

    m.top.screenId = api.GetScreenId()
    m.top.loungeToken = api.GetToken()

    m.top.observeFieldScoped("outgoingMessages", messagePort)

    api.GetSessionData()
    api.FetchCommandsRpc(messagePort)
    isOpen = false
    outgoingLoungeMessages = []
    portMessages = []
    socketMessages = []

    while true
        if m.top.shouldQuit = true
            exit while
        end if

        message = wait(60000, messagePort)
        portMessages.Clear()
        portMessages.Push(message)

        ' There's a chance messages were piling up while we were sending messages to the lounge
        ' This could happen if we were sending things to the lounge and the player state
        ' changed many times.
        while messagePort.PeekMessage() <> invalid
            portMessages.Push(messagePort.GetMessage())
        end while

        ' At this point:
        ' - We check if we need to send messages to the lounge based on player state
        ' - We check the lounge for new commands, which might need responding to
        ' - Finally, we send the outgoing messages to the lounge in one go
        outgoingLoungeMessages.Clear()
        socketMessages.Clear()

        for each portMessage in portMessages
            messageType = type(portMessage)
            if messageType = "roSocketEvent"
                socketMessages.Push(portMessage)
            else if messageType = "roSGNodeEvent"
                field = portMessage.GetField()
                if field = "outgoingMessages"
                    messages = portMessage.GetData()
                    outgoingLoungeMessages.Append(messages)
                end if
            end if
        end for

        isOpen = api.Poll(socketMessages, outgoingLoungeMessages)

        api.SendMessages(outgoingLoungeMessages)

        if not isOpen
            sleep(3000)
            api.FetchCommandsRpc(messagePort)
        end if
    end while
end function
