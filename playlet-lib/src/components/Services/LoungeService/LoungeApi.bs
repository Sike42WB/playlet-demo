import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"
import "pkg:/components/Services/LoungeService/LongPoller.bs"
import "pkg:/components/Services/LoungeService/LoungeConstants.bs"
import "pkg:/components/Services/LoungeService/LoungeMessages.bs"
import "pkg:/components/VideoPlayer/VideoUtils.bs"
import "pkg:/source/services/HttpClient.bs"
import "pkg:/source/utils/UrlUtils.bs"


const COMMAND_HANDLER_PREFIX = "_Handle_"

class LoungeApi

    public loungeServiceNode
    public playQueueNode
    public deviceId
    public deviceName
    public screenId
    public screenName
    public loungeToken
    public sessionId
    public gSessionId

    private ofs
    private lastCommandIndex = -1
    private poller

    function new(loungeServiceNode as object, playQueueNode as object)
        m.loungeServiceNode = loungeServiceNode
        m.playQueueNode = playQueueNode
        m.deviceId = loungeServiceNode.deviceId
        deviceName = loungeServiceNode.deviceName
        m.deviceName = deviceName
        m.screenName = deviceName
        m.ofs = 0
        m.poller = invalid

        commandHandlers = {}
        commandHandlers[COMMAND_TYPE_NOOP] = m.HandleIgnoreCommand
        commandHandlers[COMMAND_TYPE_GET_VOLUME] = m.HandleIgnoreCommand
        commandHandlers[COMMAND_TYPE_GET_SUBTITLES_TRACK] = m.HandleIgnoreCommand
        commandHandlers[COMMAND_TYPE_SET_SUBTITLES] = m.HandleIgnoreCommand
        commandHandlers[COMMAND_TYPE_DPAD_COMMAND] = m.HandleIgnoreCommand
        commandHandlers[COMMAND_TYPE_VOICE_COMMAND] = m.HandleIgnoreCommand
        commandHandlers[COMMAND_TYPE_ON_USER_ACTIVITY] = m.HandleIgnoreCommand

        commandHandlers[COMMAND_TYPE_GET_NOW_PLAYING] = m.HandleGetPlayingNow
        commandHandlers[COMMAND_TYPE_SESSION_ID] = m.HandleSessionId
        commandHandlers[COMMAND_TYPE_G_SESSION_ID] = m.HandleGSessionId
        commandHandlers[COMMAND_TYPE_LOUNGE_STATUS] = m.HandleLoungeStatus
        commandHandlers[COMMAND_TYPE_REMOTE_CONNECTED] = m.HandleRemoteConnected
        commandHandlers[COMMAND_TYPE_REMOTE_DISCONNECTED] = m.HandleRemoteDisconnected
        commandHandlers[COMMAND_TYPE_SET_VOLUME] = m.HandleSetVolume
        commandHandlers[COMMAND_TYPE_SET_PLAYLIST] = m.HandleSetPlaylist
        commandHandlers[COMMAND_TYPE_UPDATE_PLAYLIST] = m.HandleUpdatePlaylist
        commandHandlers[COMMAND_TYPE_PAUSE] = m.HandlePause
        commandHandlers[COMMAND_TYPE_PLAY] = m.HandlePlay
        commandHandlers[COMMAND_TYPE_STOP_VIDEO] = m.HandleStopVideo
        commandHandlers[COMMAND_TYPE_SEEK_TO] = m.HandleSeekTo

        for each key in commandHandlers
            m[COMMAND_HANDLER_PREFIX + key] = commandHandlers[key]
        end for
    end function

    function GetScreenId() as dynamic
        if not StringUtils.IsNullOrEmpty(m.screenId)
            return m.screenId
        end if

        request = HttpClient.Get("https://www.youtube.com/api/lounge/pairing/generate_screen_id")
        response = request.Await()
        if not response.IsSuccess()
            LogError(response.ErrorMessage())
            return invalid
        end if
        id = response.Text()
        if not IsString(id)
            return invalid
        end if
        m.screenId = id
        return id
    end function

    function GetToken() as dynamic
        if not StringUtils.IsNullOrEmpty(m.loungeToken)
            return m.loungeToken
        end if

        form = UrlUtils.GetUrlEncodedForm({ "screen_ids": m.screenId })
        request = HttpClient.Post("https://www.youtube.com/api/lounge/pairing/get_lounge_token_batch", form)
        request.Header("Content-Type", "application/x-www-form-urlencoded")
        response = request.Await()
        if not response.IsSuccess()
            LogError(response.ErrorMessage())
            return invalid
        end if

        json = response.Json()
        screens = json.screens
        if not IsArray(screens) or screens.Count() <> 1
            LogError("Unexpected response from get_lounge_token_batch")
            return invalid
        end if

        ' TODO:P0 cache all lounge info
        m.loungeToken = screens[0].loungeToken
        return m.loungeToken
    end function

    function GetSessionData() as void
        baseUrl = "https://www.youtube.com/api/lounge/bc/bind"
        queryParams = {
            "device": "LOUNGE_SCREEN"
            "theme": "cl"
            "capabilities": "dsp%2Cmic%2Cdpa"
            "mdxVersion": "2"
            "VER": "8"
            "v": "2"
            "t": "1"
            "app": "Playlet"
            "AID": "42"
            "zx": "xxxxxxxxxxxx"
            "RID": "1337"
        }

        queryParams["name"] = m.screenName
        queryParams["id"] = m.deviceId
        queryParams["loungeIdToken"] = m.loungeToken

        url = UrlUtils.BuildUrl(baseUrl, invalid, queryParams)

        request = HttpClient.Post(url, "count=0")
        request.Header("Content-Type", "application/x-www-form-urlencoded")

        response = request.Await()
        if not response.IsSuccess()
            LogError(response.ErrorMessage())
            return
        end if

        text = response.Text()
        ' First line should be a number, which is the length of the JSON payload
        text = text.Mid(text.instr(`\n`) + 1)

        messagesToSend = []
        commands = ParseJson(text)
        m.ProcessCommands(commands, messagesToSend)
        m.SendMessages(messagesToSend)
    end function

    function FetchCommandsRpc(messagePort as object) as void
        ' Note we're not using https, not supported by LongPoller
        baseUrl = "http://www.youtube.com/api/lounge/bc/bind"
        queryParams = {
            "device": "LOUNGE_SCREEN"
            "theme": "cl"
            "capabilities": "dsp%2Cmic%2Cdpa"
            "mdxVersion": "2"
            "VER": "8"
            "v": "2"
            "t": "1"
            "app": "Playlet"
            "AID": "42"
            "zx": "xxxxxxxxxxxx"
            "RID": "rpc"
            "CI": "0"
        }

        queryParams["name"] = m.screenName
        queryParams["id"] = m.deviceId
        queryParams["loungeIdToken"] = m.loungeToken
        queryParams["SID"] = m.sessionId
        queryParams["gsessionid"] = m.gSessionId

        url = UrlUtils.BuildUrl(baseUrl, invalid, queryParams)

        if m.poller = invalid
            m.poller = new LongPoller()
        end if

        m.poller.SendRequest(url, messagePort)
    end function

    function Poll(socketMessages as object, messagesToSend as object) as boolean
        chunks = m.poller.Poll(socketMessages)
        if IsArray(chunks)
            for each chunk in chunks
                m.ProcessChunk(chunk, messagesToSend)
            end for
        end if

        return m.poller.IsOpen()
    end function

    function ProcessChunk(chunk as string, messagesToSend as object) as void
        chunk = m.ConsumeNewLines(chunk)
        newLineIndex = chunk.InStr(`\n`)
        while newLineIndex > 0
            payloadSize = chunk.Left(newLineIndex).trim()
            payloadSize = payloadSize.ToInt()
            payload = chunk.Mid(newLineIndex + 1, payloadSize)
            commands = ParseJson(payload)
            m.ProcessCommands(commands, messagesToSend)
            chunk = chunk.Mid(newLineIndex + payloadSize + 1)
            newLineIndex = chunk.InStr(`\n`)
        end while
    end function

    function ConsumeNewLines(chunk as string) as string
        CR = `\r`
        LF = `\n`
        startIndex = 0
        while true
            char = chunk.Mid(startIndex, 1)
            if char = CR or char = LF
                startIndex += 1
            else
                exit while
            end if
        end while

        if startIndex > 0
            return chunk.Mid(startIndex)
        end if

        return chunk
    end function

    function ProcessCommands(commands as object, messagesToSend as object) as void
        if not IsArray(commands)
            return
        end if

        for each command in commands
            if not IsArray(command) or command.Count() <> 2
                continue for
            end if

            commandIndex = command[0]
            if commandIndex <= m.lastCommandIndex
                LogDebug("Skipping command already processed:", command)
                continue for
            end if
            m.lastCommandIndex = commandIndex

            commandId = command[0]
            commandData = command[1]
            commandType = commandData[0]
            commandArgs = invalid
            if commandData.Count() > 1
                commandArgs = commandData[1]
            end if

            handler = COMMAND_HANDLER_PREFIX + commandType
            if m.DoesExist(handler)
                LogInfo(commandType)
                m[handler](commandId, commandType, commandArgs, messagesToSend)
            else
                LogWarn("Unknown command type:", commandType, "command:", command)
            end if
        end for
    end function

    function HandleIgnoreCommand(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        LogDebug("Ignoring command:", commandType, "args:", commandArgs)
    end function

    function HandleSessionId(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        m.sessionId = commandArgs
        LogInfo("sessionId:", m.sessionId)
    end function

    function HandleGSessionId(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        m.gSessionId = commandArgs
        LogInfo("gSessionId:", m.gSessionId)
    end function

    function HandleGetPlayingNow(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object) as void
        player = VideoUtils.GetVideoPlayer()

        message = LoungeMessages.OnHasPreviousNextChanged()
        message["commandId"] = commandId
        messagesToSend.Push(message)

        message = LoungeMessages.NowPlaying(player)
        message["commandId"] = commandId
        messagesToSend.Push(message)

        message = LoungeMessages.OnStateChange(player)
        message["commandId"] = commandId
        messagesToSend.Push(message)
    end function

    function HandleLoungeStatus(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing
    end function

    function HandleRemoteConnected(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing
        ' TODO:P2 show connected device notification
    end function

    function HandleRemoteDisconnected(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing
    end function

    function HandleSetVolume(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object) as void
        player = VideoUtils.GetVideoPlayer()
        if player = invalid
            return
        end if

        volume = Val(commandArgs["volume"])
        isMute = volume = 0
        LogInfo("Setting volume is not supported:", volume, "but can mute:", isMute)
        ' TODO:P0 volume should be set to the lounge state.
        ' Also the state needs to be separate from the player, since SponsorBlock can mute sections.
        player.mute = isMute
    end function

    function HandleSetPlaylist(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        LogInfo(commandType, commandArgs)

        videoId = commandArgs[FIELD_VIDEO_ID]
        payload = {
            "videoId": videoId
        }

        timestamp = commandArgs[FIELD_CURRENT_TIME]
        if not StringUtils.IsNullOrEmpty(timestamp)
            timestamp = CInt(Val(timestamp))
            if timestamp > 0
                payload["timestamp"] = timestamp
            end if
        end if

        contentNode = InvidiousContent.ToRowCellContentNode(payload, invalid)
        m.playQueueNode@.Play(contentNode, -1)
    end function

    function HandleUpdatePlaylist(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        LogInfo(commandType, commandArgs)
    end function

    function HandlePause(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        VideoUtils.PauseVideo()
    end function

    function HandlePlay(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        VideoUtils.ResumeVideo()
    end function

    function HandleStopVideo(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        VideoUtils.CloseVideo()
    end function

    function HandleSeekTo(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object) as void
        player = VideoUtils.GetVideoPlayer()
        if player = invalid
            return
        end if

        seekTo = Val(commandArgs[FIELD_NEW_TIME])
        LogInfo("Seeking to:", seekTo)
        player.seek = seekTo
    end function

    function SendMessages(messages as object) as void
        if messages.Count() = 0
            return
        end if

        baseUrl = "https://www.youtube.com/api/lounge/bc/bind"
        queryParams = {
            "device": "LOUNGE_SCREEN"
            "theme": "cl"
            "capabilities": "dsp%2Cmic%2Cdpa"
            "mdxVersion": "2"
            "VER": "8"
            "v": "2"
            "t": "1"
            "app": "Playlet"
            "AID": "42"
            "zx": "xxxxxxxxxxxx"
            "RID": "1337"
        }

        queryParams["name"] = m.screenName
        queryParams["id"] = m.deviceId
        queryParams["loungeIdToken"] = m.loungeToken
        queryParams["SID"] = m.sessionId
        queryParams["gsessionid"] = m.gSessionId
        queryParams["AID"] = messages[0].commandId

        url = UrlUtils.BuildUrl(baseUrl, invalid, queryParams)

        postData = [
            { key: "count", value: `${messages.Count()}` }
            { key: "ofs", value: `${m.ofs}` }
        ]

        m.ofs += messages.Count()

        for i = 0 to messages.Count() - 1
            message = messages[i]
            keyPrefix = `req${i}_`

            postData.Push({ key: `${keyPrefix}${FIELD_COMMAND_NAME}`, value: message.commandType })

            commandArgs = message.commandArgs
            if commandArgs <> invalid
                for each key in commandArgs
                    postData.Push({ key: `${keyPrefix}${key}`, value: commandArgs[key] })
                end for
            end if
        end for

        LogDebug("Sending messages:", postData)

        body = UrlUtils.GetUrlEncodedForm(postData)
        request = HttpClient.Post(url, body)
        request.Header("Content-Type", "application/x-www-form-urlencoded")

        response = request.Await()
        if not response.IsSuccess()
            LogError(response.ErrorMessage())
        end if
    end function
end class
