import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"
import "pkg:/components/VideoPlayer/VideoUtils.bs"
import "pkg:/source/services/HttpClient.bs"
import "pkg:/source/utils/UrlUtils.bs"

const COMMAND_NOW_PLAYING = "nowPlaying"
const COMMAND_ON_STATE_CHANGE = "onStateChange"
const COMMAND_ON_VOLUME_CHANGED = "onVolumeChanged"
const COMMAND_ON_PREVIOUS_NEXT_CHANGE = "onHasPreviousNextChanged"

const COMMAND_TYPE_SET_PLAYLIST = "setPlaylist"
const COMMAND_TYPE_LOUNGE_STATUS = "loungeStatus"
const COMMAND_TYPE_REMOTE_CONNECTED = "remoteConnected"
const COMMAND_TYPE_REMOTE_DISCONNECTED = "remoteDisconnected"
const COMMAND_TYPE_GET_NOW_PLAYING = "getNowPlaying"
const COMMAND_TYPE_GET_VOLUME = "getVolume"
const COMMAND_TYPE_GET_SUBTITLES_TRACK = "getSubtitlesTrack"
const COMMAND_TYPE_UPDATE_PLAYLIST = "updatePlaylist"
const COMMAND_TYPE_NOOP = "noop"
const COMMAND_TYPE_PLAY = "play"
const COMMAND_TYPE_PAUSE = "pause"
const COMMAND_TYPE_NEXT = "next"
const COMMAND_TYPE_PREVIOUS = "previous"
const COMMAND_TYPE_SEEK_TO = "seekTo"
const COMMAND_TYPE_SET_VOLUME = "setVolume"
const COMMAND_TYPE_STOP_VIDEO = "stopVideo"
const COMMAND_TYPE_DPAD = "dpadCommand"
const COMMAND_TYPE_VOICE = "voiceCommand"
const COMMAND_TYPE_SUBTITLES = "setSubtitlesTrack"
' Special commands
const COMMAND_TYPE_SESSION_ID = "c"
const COMMAND_TYPE_G_SESSION_ID = "S"
const COMMAND_KEY_UP = "UP"
const COMMAND_KEY_DOWN = "DOWN"
const COMMAND_KEY_LEFT = "LEFT"
const COMMAND_KEY_RIGHT = "RIGHT"
const COMMAND_KEY_ENTER = "ENTER"
const COMMAND_KEY_BACK = "BACK"

enum PlayerStatus
    IDLE = -1
    PLAYING = 1
    PAUSED = 2
    LOADING = 3
    STOPPED = 4
end enum

const POLL_BUFSIZE = 65536

const COMMAND_HANDLER_PREFIX = "_Handle_"

enum HttpResponseState
    INIT = 0
    READING_STATUS = 1
    READING_HEADERS = 2
    READING_BODY_CHUNK_SIZE = 3
    READING_BODY_CHUNK = 4
end enum

class LoungeApi

    public loungeServiceNode
    public playQueueNode
    public deviceId
    public deviceName
    public screenId
    public screenName
    public loungeToken
    public sessionId
    public gSessionId

    private ofs
    private lastCommandIndex = -1

    ' Socket stuff for long polling
    private socket
    private socket_buffer
    private socket_state = HttpResponseState.INIT
    private socket_chunk_size = 0
    private socket_timer

    function new(loungeServiceNode as object, playQueueNode as object)
        m.loungeServiceNode = loungeServiceNode
        m.playQueueNode = playQueueNode
        m.deviceId = loungeServiceNode.deviceId
        deviceName = loungeServiceNode.deviceName
        m.deviceName = deviceName
        m.screenName = deviceName
        m.ofs = 0
        m.socket_timer = CreateObject("roTimespan")

        commandHandlers = {}
        commandHandlers[COMMAND_TYPE_GET_NOW_PLAYING] = m.HandleGetPlayingNow
        commandHandlers[COMMAND_TYPE_SESSION_ID] = m.HandleSessionId
        commandHandlers[COMMAND_TYPE_G_SESSION_ID] = m.HandleGSessionId
        commandHandlers[COMMAND_TYPE_NOOP] = m.HandleNoop
        commandHandlers[COMMAND_TYPE_LOUNGE_STATUS] = m.HandleLoungeStatus
        commandHandlers[COMMAND_TYPE_REMOTE_CONNECTED] = m.HandleRemoteConnected
        commandHandlers[COMMAND_TYPE_REMOTE_DISCONNECTED] = m.HandleRemoteDisconnected
        commandHandlers[COMMAND_TYPE_GET_SUBTITLES_TRACK] = m.HandleGetSubtitlesTrack
        commandHandlers[COMMAND_TYPE_GET_VOLUME] = m.HandleGetVolume
        commandHandlers[COMMAND_TYPE_SET_VOLUME] = m.HandleSetVolume
        commandHandlers[COMMAND_TYPE_SET_PLAYLIST] = m.HandleSetPlaylist
        commandHandlers[COMMAND_TYPE_PAUSE] = m.HandlePause
        commandHandlers[COMMAND_TYPE_PLAY] = m.HandlePlay
        commandHandlers[COMMAND_TYPE_STOP_VIDEO] = m.HandleStopVideo
        commandHandlers[COMMAND_TYPE_DPAD] = m.HandleDpadCommand

        for each key in commandHandlers
            m[COMMAND_HANDLER_PREFIX + key] = commandHandlers[key]
        end for
    end function

    function GetScreenId() as dynamic
        if not StringUtils.IsNullOrEmpty(m.screenId)
            return m.screenId
        end if

        request = HttpClient.Get("https://www.youtube.com/api/lounge/pairing/generate_screen_id")
        response = request.Await()
        if not response.IsSuccess()
            LogError(response.ErrorMessage())
            return invalid
        end if
        id = response.Text()
        if not IsString(id)
            return invalid
        end if
        m.screenId = id
        return id
    end function

    function GetToken() as dynamic
        if not StringUtils.IsNullOrEmpty(m.loungeToken)
            return m.loungeToken
        end if

        form = `screen_ids=${m.screenId}`.EncodeUri()
        request = HttpClient.Post("https://www.youtube.com/api/lounge/pairing/get_lounge_token_batch", form)
        request.Header("Content-Type", "application/x-www-form-urlencoded")
        response = request.Await()
        if not response.IsSuccess()
            LogError(response.ErrorMessage())
            return invalid
        end if

        json = response.Json()
        screens = json.screens
        if not IsArray(screens) or screens.Count() <> 1
            LogError("Unexpected response from get_lounge_token_batch")
            return invalid
        end if

        m.loungeToken = screens[0].loungeToken
        return m.loungeToken
    end function

    function GetSessionData() as void
        baseUrl = "https://www.youtube.com/api/lounge/bc/bind"
        queryParams = {
            "device": "LOUNGE_SCREEN"
            "theme": "cl"
            "capabilities": "dsp%2Cmic%2Cdpa"
            "mdxVersion": "2"
            "VER": "8"
            "v": "2"
            "t": "1"
            "app": "Playlet"
            "AID": "42"
            "zx": "xxxxxxxxxxxx"
            "RID": "1337"
        }

        queryParams["name"] = m.screenName
        queryParams["id"] = m.deviceId
        queryParams["loungeIdToken"] = m.loungeToken

        url = UrlUtils.BuildUrl(baseUrl, invalid, queryParams)

        request = HttpClient.Post(url, "count=0")
        request.Header("Content-Type", "application/x-www-form-urlencoded")

        response = request.Await()
        if not response.IsSuccess()
            LogError(response.ErrorMessage())
            return
        end if

        text = response.Text()
        ' First line should be a number, which is the length of the JSON payload
        text = text.Mid(text.instr(`\n`) + 1)

        messagesToSend = []
        commands = ParseJson(text)
        m.ProcessCommands(commands, messagesToSend)
        m.SendMessage(messagesToSend)
    end function

    function FetchCommandsRpc(messagePort as object) as void
        path = "/api/lounge/bc/bind"
        queryParams = {
            "device": "LOUNGE_SCREEN"
            "theme": "cl"
            "capabilities": "dsp%2Cmic%2Cdpa"
            "mdxVersion": "2"
            "VER": "8"
            "v": "2"
            "t": "1"
            "app": "Playlet"
            "AID": "42"
            "zx": "xxxxxxxxxxxx"
            "RID": "rpc"
            "CI": "0"
        }

        queryParams["name"] = m.screenName
        queryParams["id"] = m.deviceId
        queryParams["loungeIdToken"] = m.loungeToken
        queryParams["SID"] = m.sessionId
        queryParams["gsessionid"] = m.gSessionId

        path = UrlUtils.BuildUrl(path, invalid, queryParams)

        m.StartLongPolling(path, messagePort)
    end function

    function StartLongPolling(path as string, messagePort as object) as void
        ' since roUrlTransfer can't do long polling, we're doing raw socket
        sendAddress = CreateObject("roSocketAddress")
        sendAddress.SetAddress("www.youtube.com:80")

        socket = CreateObject("roStreamSocket")
        socket.setSendToAddress(sendAddress)
        if not socket.Connect()
            LogError("Failed to connect")
            return
        end if

        message = `GET ${path} HTTP/1.1\r\n`
        message += `Host: www.youtube.com\r\n`
        message += `\r\n`

        socket.SendStr(message)

        socket.notifyReadable(true)
        socket.setMessagePort(messagePort)

        m.socket = socket
        m.socket_timer.Mark()
    end function

    function Poll(message as object) as boolean
        if m.socket = invalid
            return false
        end if

        socket = m.socket
        if not socket.IsConnected()
            LogError("Socket is not connected")
            m.CloseSocket()
            return false
        end if

        ' Not receiving data for 60 seconds might be a sign of a dead connection
        if m.socket_timer.TotalMilliseconds() > 60000
            LogWarn("Timeout")
            m.CloseSocket()
            return false
        end if

        if type(message) <> "roSocketEvent"
            return true
        end if

        data = socket.ReceiveStr(POLL_BUFSIZE)
        if not socket.eSuccess()
            LogError("Error receiving data")
            m.CloseSocket()
            return false
        end if

        m.socket_timer.Mark()

        if m.socket_buffer = invalid
            m.socket_buffer = ""
        end if

        m.socket_buffer += data

        if m.socket_state = HttpResponseState.INIT
            m.socket_state = HttpResponseState.READING_STATUS
        end if

        if m.socket_state = HttpResponseState.READING_STATUS
            newLineIndex = m.socket_buffer.InStr(`\r\n`)
            if newLineIndex > 0
                operationLine = m.socket_buffer.Left(newLineIndex)
                LogInfo(operationLine)
                parts = operationLine.Split(" ")
                if parts.Count() <> 3 or parts[0] <> "HTTP/1.1" or parts[1] <> "200"
                    LogError("Invalid operation line:", operationLine)
                    m.CloseSocket()
                    return false
                end if
                m.socket_buffer = m.socket_buffer.Mid(newLineIndex + 2)
                m.socket_state = HttpResponseState.READING_HEADERS
            end if
        end if

        if m.socket_state = HttpResponseState.READING_HEADERS
            newLineIndex = m.socket_buffer.InStr(`\r\n\r\n`)
            if newLineIndex > 0
                headers = m.socket_buffer.Left(newLineIndex)
                LogDebug(headers)
                m.socket_buffer = m.socket_buffer.Mid(newLineIndex + 4)
                m.socket_state = HttpResponseState.READING_BODY_CHUNK_SIZE
            end if
        end if

        messagesToSend = []

        READING_BODY_CHUNK_SIZE:
        ' Transfer-Encoding: chunked - long polling
        if m.socket_state = HttpResponseState.READING_BODY_CHUNK_SIZE
            m.ReadNewLines()
            newLineIndex = m.socket_buffer.InStr(`\r\n`)
            if newLineIndex > 0
                chunkSize = m.socket_buffer.Left(newLineIndex)
                chunkSize = chunkSize.Trim()
                chunkSize = Val(chunkSize, 16)
                LogDebug("Chunk size:", chunkSize)
                m.socket_chunk_size = chunkSize
                if chunkSize = 0
                    LogDebug("End of chunked data")
                    m.CloseSocket()
                    return false
                end if
                m.socket_buffer = m.socket_buffer.Mid(newLineIndex + 2)
                m.socket_state = HttpResponseState.READING_BODY_CHUNK
            end if
        end if

        if m.socket_state = HttpResponseState.READING_BODY_CHUNK
            if m.socket_chunk_size > 0
                if m.socket_buffer.Len() >= m.socket_chunk_size
                    chunk = m.socket_buffer.Left(m.socket_chunk_size)
                    m.socket_buffer = m.socket_buffer.Mid(m.socket_chunk_size)
                    m.socket_chunk_size = 0
                    m.socket_state = HttpResponseState.READING_BODY_CHUNK_SIZE
                    m.ProcessChunk(chunk, messagesToSend)
                    goto READING_BODY_CHUNK_SIZE
                end if
            end if
        end if

        m.SendMessage(messagesToSend)
        return true
    end function

    function CloseSocket()
        if m.socket <> invalid
            m.socket.notifyReadable(false)
            m.socket.close()
            m.socket = invalid
            m.socket_buffer = invalid
            m.socket_state = HttpResponseState.INIT
        end if
    end function

    function ReadNewLines()
        CR = `\r`
        LF = `\n`
        startIndex = 0
        while true
            char = m.socket_buffer.Mid(startIndex, 1)
            if char = CR or char = LF
                startIndex += 1
            else
                exit while
            end if
        end while

        if startIndex > 0
            m.socket_buffer = m.socket_buffer.Mid(startIndex)
        end if
    end function

    function ProcessChunk(chunk as string, messagesToSend as object) as void
        m.ReadNewLines()
        newLineIndex = chunk.InStr(`\n`)
        while newLineIndex > 0
            payloadSize = chunk.Left(newLineIndex).trim()
            payloadSize = payloadSize.ToInt()
            payload = chunk.Mid(newLineIndex + 1, payloadSize)
            commands = ParseJson(payload)
            m.ProcessCommands(commands, messagesToSend)
            chunk = chunk.Mid(newLineIndex + payloadSize + 1)
            newLineIndex = chunk.InStr(`\n`)
        end while
    end function

    function ProcessCommands(commands as object, messagesToSend as object) as void
        if not IsArray(commands)
            return
        end if

        for each command in commands
            if not IsArray(command) or command.Count() <> 2
                continue for
            end if

            commandIndex = command[0]
            if commandIndex <= m.lastCommandIndex
                LogDebug("Skipping command already processed:", command)
                continue for
            end if
            m.lastCommandIndex = commandIndex

            commandId = command[0]
            commandData = command[1]
            commandType = commandData[0]
            commandArgs = invalid
            if commandData.Count() > 1
                commandArgs = commandData[1]
            end if

            handler = COMMAND_HANDLER_PREFIX + commandType
            if m.DoesExist(handler)
                LogInfo(commandType)
                m[handler](commandId, commandType, commandArgs, messagesToSend)
            else
                LogWarn("Unknown command:", commandType)
                #if DEBUG
                    LogDebug(command)
                #end if
            end if
        end for
    end function

    function HandleNoop(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing
    end function

    function HandleSessionId(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        m.sessionId = commandArgs
        LogInfo("sessionId:", m.sessionId)
    end function

    function HandleGSessionId(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        m.gSessionId = commandArgs
        LogInfo("gSessionId:", m.gSessionId)
    end function

    function HandleGetPlayingNow(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object) as void
        message = {
            "commandId": commandId
            "commandType": COMMAND_NOW_PLAYING
            "cpn": "foo"
        }
        player = VideoUtils.GetVideoPlayer()
        if player = invalid
            messagesToSend.Push(message)
            return
        end if

        message["loadedTime"] = "0"
        message["currentTime"] = `${player.position}`
        message["seekableStartTime"] = "0"
        content = player.content
        if content <> invalid
            metadata = content.metadata
            if metadata <> invalid
                lengthSeconds = metadata.lengthSeconds
                if IsInt(lengthSeconds)
                    length = `${lengthSeconds}`
                    message["duration"] = length
                    message["seekableEndTime"] = length
                end if
            end if
        end if
        message["state"] = m.GetPlayerState(player)

        messagesToSend.Push(message)
    end function

    function GetPlayerState(player as object) as PlayerStatus
        if player = invalid
            return PlayerStatus.IDLE
        end if

        state = player.state
        if state = "playing"
            return PlayerStatus.PLAYING
        else if state = "paused"
            return PlayerStatus.PAUSED
        else if state = "buffering"
            return PlayerStatus.LOADING
        else if state = "stopped" or state = "stopping" or state = "finished"
            return PlayerStatus.STOPPED
        end if

        return PlayerStatus.IDLE
    end function

    function HandleLoungeStatus(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing
    end function

    function HandleRemoteConnected(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing
        ' TODO:P2 show connected device notification
    end function

    function HandleRemoteDisconnected(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing
    end function

    function HandleGetSubtitlesTrack(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing
        ' TODO:P2 send subtitles track?
    end function

    function HandleGetVolume(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        ' Do nothing - volume is not supported anyway
    end function

    function HandleSetVolume(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object) as void
        player = VideoUtils.GetVideoPlayer()
        if player = invalid
            return
        end if

        volume = Val(commandArgs["volume"])
        isMute = volume = 0
        LogInfo("Setting volume is not supported:", volume, "but can mute:", isMute)
        ' TODO:P0 volume should be set to the lounge state.
        ' Also the state needs to be separate from the player, since SponsorBlock can mute sections.
        player.mute = isMute
    end function

    function HandleSetPlaylist(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        LogInfo(commandType, commandArgs)
        videoId = commandArgs["videoId"]
        payload = {
            "videoId": videoId
        }
        contentNode = InvidiousContent.ToRowCellContentNode(payload, invalid)
        m.playQueueNode@.Play(contentNode, -1)
        LogInfo("setPlaylist:", videoId)
    end function

    function HandlePause(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        VideoUtils.PauseVideo()
    end function

    function HandlePlay(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        VideoUtils.ResumeVideo()
    end function

    function HandleStopVideo(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object)
        VideoUtils.CloseVideo()
    end function

    function HandleSeekTo(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object) as void
        player = VideoUtils.GetVideoPlayer()
        if player = invalid
            return
        end if

        seekTo = Val(commandArgs["newTime"])
        LogInfo("Seeking to:", seekTo)
        player.seek = seekTo
    end function

    function HandleDpadCommand(commandId as integer, commandType as string, commandArgs as object, messagesToSend as object) as void
        LogWarn("Dpad command not supported, since Roku blocks ECP commands from a loopback address")
    end function

    function SendMessage(messages as object) as void
        if messages.Count() = 0
            return
        end if

        baseUrl = "https://www.youtube.com/api/lounge/bc/bind"
        queryParams = {
            "device": "LOUNGE_SCREEN"
            "theme": "cl"
            "capabilities": "dsp%2Cmic%2Cdpa"
            "mdxVersion": "2"
            "VER": "8"
            "v": "2"
            "t": "1"
            "app": "Playlet"
            "AID": "42"
            "zx": "xxxxxxxxxxxx"
            "RID": "1337"
        }

        queryParams["name"] = m.screenName
        queryParams["id"] = m.deviceId
        queryParams["loungeIdToken"] = m.loungeToken
        queryParams["SID"] = m.sessionId
        queryParams["gsessionid"] = m.gSessionId
        queryParams["AID"] = messages[0].commandId

        url = UrlUtils.BuildUrl(baseUrl, invalid, queryParams)

        postData = {
            "count": `${messages.Count()}`
            "ofs": `${m.ofs}`
        }

        m.ofs += messages.Count()

        for i = 0 to messages.Count() - 1
            message = messages[i]
            keyPrefix = `req${i}_`
            postData[`${keyPrefix}_sc`] = message.commandType

            commandArgs = message.commandArgs
            if commandArgs <> invalid
                for each key in commandArgs
                    postData[`${keyPrefix}${key}`] = commandArgs[key]
                end for
            end if
        end for

        LogDebug("Sending messages:", postData)

        body = UrlUtils.GetUrlEncodedForm(postData)
        request = HttpClient.Post(url, body)
        request.Header("Content-Type", "application/x-www-form-urlencoded")

        response = request.Await()
        if not response.IsSuccess()
            LogError(response.ErrorMessage())
        end if
    end function
end class
