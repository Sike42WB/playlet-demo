import "pkg:/source/utils/CryptoUtils.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/Types.bs"

const VIDEOS_GROUP = "Videos"
const CHANNELS_GROUP = "Channels"
const PLAYLISTS_GROUP = "Playlists"

function Init()
    m.top.content = m.top.findNode("content")
    m.bookmarksString = ""
    Load()
    m.top.content.ObserveField("change", FuncName(OnChange))
end function

function Load() as void
    bookmarksString = RegistryUtils.Read(RegistryUtils.BOOKMARKS)
    if bookmarksString = invalid
        return
    end if

    m.bookmarksString = bookmarksString
    bookmarks = ParseJson(bookmarksString)
    if bookmarks = invalid
        return
    end if

    for each bookmark in bookmarks.bookmarks
        AddBookmarkGroup(bookmark.title)
        for each item in bookmark.items
            AddBookmark(item.type, item.id, bookmark.title)
        end for
    end for
end function

function Save() as void
    bookmarkGroups = m.top.content.getChildren(-1, 0)
    if bookmarkGroups.Count() = 0
        RegistryUtils.Delete(RegistryUtils.BOOKMARKS)
        return
    end if

    bookmarks = []
    for each group in bookmarkGroups
        items = []
        nodes = group.getChildren(-1, 0)
        for each node in nodes
            items.Push({
                type: node.type,
                id: node.itemId
            })
        end for
        bookmarks.push({
            title: group.title,
            items: items
        })
    end for

    bookmarksString = FormatJson({
        __version: m.top.__version,
        bookmarks: bookmarks
    })

    if m.bookmarksString = bookmarksString
        return
    end if

    RegistryUtils.Write(RegistryUtils.BOOKMARKS, bookmarksString)
    m.bookmarksString = bookmarksString
end function

function AddBookmarkGroup(groupName as string) as object
    node = CreateObject("roSGNode", "ContentNode")
    node.id = CryptoUtils.GetMd5(groupName)
    node.title = groupName
    m.top.content.appendChild(node)
    LogInfo("Added bookmark group:", groupName)
    return node
end function

function AddBookmark(bookmarkType as string, id as string, groupName as string)
    groupNode = m.top.content.findNode(CryptoUtils.GetMd5(groupName))
    if groupNode = invalid
        groupNode = AddBookmarkGroup(groupName)
    end if

    node = CreateObject("roSGNode", "ContentNode")
    node.id = id
    node.addFields({
        type: bookmarkType,
        itemId: id
    })
    groupNode.insertChild(node, 0)
    LogInfo("Added bookmark:", id)
end function

function RemoveBookmark(id as string) as void
    node = m.top.content.findNode(id)
    if node = invalid
        return
    end if

    group = node.getParent()
    group.removeChild(node)
    LogInfo("Removed bookmark:", id)

    if group.getChildCount() = 0
        m.top.content.removeChild(group)
        LogInfo("Removed bookmark group:", group.title)
    end if
end function

function OnChange(event as object) as void
    change = event.getData()
    if change.Operation = "none"
        return
    end if

    Save()
end function

function GetMenuForVideo(videoNode as object) as object
    videoId = videoNode.videoId
    if StringUtils.IsNullOrEmpty(videoId)
        return []
    end if

    menu = []
    isInBookmarks = m.top.content.findNode(videoId) <> invalid
    if isInBookmarks
        item = CreateObject("roSGNode", "ContextMenuItemContentNode")
        item.title = "Remove from bookmarks"
        item.node = m.top
        item.func = "RemoveBookmark"
        item.args = [videoId]
        menu.push(item)
    else
        item = CreateObject("roSGNode", "ContextMenuItemContentNode")
        item.title = `Add to "${VIDEOS_GROUP}" bookmark`
        item.node = m.top
        item.func = "AddBookmark"
        item.args = ["video", videoId, VIDEOS_GROUP]
        menu.push(item)
    end if
    return menu
end function

function GetMenuForPlaylist(playlistNode as object) as object
    playlistId = playlistNode.playlistId
    if StringUtils.IsNullOrEmpty(playlistId)
        return []
    end if

    menu = []
    isInBookmarks = m.top.content.findNode(playlistId) <> invalid
    if isInBookmarks
        item = CreateObject("roSGNode", "ContextMenuItemContentNode")
        item.title = "Remove from bookmarks"
        item.node = m.top
        item.func = "RemoveBookmark"
        item.args = [playlistId]
        menu.push(item)
    else
        item = CreateObject("roSGNode", "ContextMenuItemContentNode")
        item.title = `Add to "${PLAYLISTS_GROUP}" bookmark`
        item.node = m.top
        item.func = "AddBookmark"
        item.args = ["playlist", playlistId, PLAYLISTS_GROUP]
        menu.push(item)

        item = CreateObject("roSGNode", "ContextMenuItemContentNode")
        item.title = `Add to "${playlistNode.title}" bookmark`
        item.node = m.top
        item.func = "AddBookmark"
        item.args = ["playlist", playlistId, playlistNode.title]
        menu.push(item)
    end if
    return menu
end function

function GetMenuForChannel(channelNode as object) as object
    authorId = channelNode.authorId
    if StringUtils.IsNullOrEmpty(authorId)
        return []
    end if

    menu = []
    isInBookmarks = m.top.content.findNode(authorId) <> invalid
    if isInBookmarks
        item = CreateObject("roSGNode", "ContextMenuItemContentNode")
        item.title = "Remove from bookmarks"
        item.node = m.top
        item.func = "RemoveBookmark"
        item.args = [authorId]
        menu.push(item)
    else
        item = CreateObject("roSGNode", "ContextMenuItemContentNode")
        item.title = `Add to "${CHANNELS_GROUP}" bookmark`
        item.node = m.top
        item.func = "AddBookmark"
        item.args = ["channel", authorId, CHANNELS_GROUP]
        menu.push(item)

        item = CreateObject("roSGNode", "ContextMenuItemContentNode")
        item.title = `Add to "${channelNode._author}" bookmark`
        item.node = m.top
        item.func = "AddBookmark"
        item.args = ["channel", authorId, channelNode._author]
        menu.push(item)
    end if
    return menu
end function

' TODO:P0
' When a video is selected:
'   - Add to "Videos" bookmark - DONE
'   - Add to bookmarks...

' When a channel is selected:
'   - Add to "Channels" bookmark - DONE
'   - Add to <ChannelName> bookmark - DONE
'   - Add to bookmarks...

' When a playlist is selected:
'   - Add to "Playlists" bookmark - DONE
'   - Add to <PlaylistName> bookmark - DONE
'   - Add to bookmarks...
