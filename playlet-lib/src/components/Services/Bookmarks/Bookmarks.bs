import "pkg:/components/ContextMenu/ContextMenuUtils.bs"
import "pkg:/source/utils/CryptoUtils.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/Types.bs"

' TODO:P0 redo models
' Models

' ApiEndpoint:
' - id
' - url
' - queryParams
' - pathParams
' - cacheSeconds
' - paginationType
' - authenticated
' - responseHandler
'
' FeedSource:
' - apiType: string ("Invidious")
' - endpoint: ApiEndpoint
' - pathParams
' - queryParams
' - state:
'   - paginationtype (Runtime field)
'   - page (Runtime field)
'   - continuation (Runtime field)
'   - queryParams.page (Runtime field)
'   - queryParams.continuation (Runtime field)
'
' Feed/FeedContentNode:
' - Title
' - feedSources: FeedSource[]
' - feedSourceIndex (Runtime field)

' RowListLayout
' - Feed[]

' Bookmarks
' - BookmarkGroup[]

' BookmarkGroup
' - title
' - Bookmark[]

' Bookmark
' - type: video|playlist|channel|feedSource
' - ItemId
' - FeedSource

const VIDEOS_GROUP = "Videos"
const CHANNELS_GROUP = "Channels"
const PLAYLISTS_GROUP = "Playlists"

function Init()
    m.top.content = m.top.findNode("content")
    m.bookmarksString = ""
    Load()
    m.top.ObserveField("contentChange", FuncName(OnContentChange))
end function

function Load() as void
    bookmarksString = RegistryUtils.Read(RegistryUtils.BOOKMARKS)
    if bookmarksString = invalid
        return
    end if

    m.bookmarksString = bookmarksString
    bookmarks = ParseJson(bookmarksString)
    if bookmarks = invalid
        return
    end if

    for each bookmark in bookmarks.bookmarks
        AddBookmarkGroup(bookmark.title)
        for each item in bookmark.items
            if item.type = "feedSource"
                AddFeedSourceBookmark(item.feedSource)
            else
                AddBookmark(item.type, item.id, bookmark.title)
            end if
        end for
    end for
end function

function Save() as void
    bookmarkGroupNodes = m.top.content.getChildren(-1, 0)
    if bookmarkGroupNodes.Count() = 0
        RegistryUtils.Delete(RegistryUtils.BOOKMARKS)
        return
    end if

    bookmarks = []
    for each bookmarkGroupNode in bookmarkGroupNodes
        items = []
        bookmarkNodes = bookmarkGroupNode.getChildren(-1, 0)
        for each bookmarkNode in bookmarkNodes
            item = {
                type: bookmarkNode.type,
                id: bookmarkNode.itemId
            }
            if item.type = "feedSource"
                item.feedSource = bookmarkNode.feedSource
            end if
            items.Push(item)
        end for
        bookmarks.push({
            title: bookmarkGroupNode.title,
            items: items
        })
    end for

    bookmarksString = FormatJson({
        __version: m.top.__version,
        bookmarks: bookmarks
    })

    if m.bookmarksString = bookmarksString
        return
    end if

    RegistryUtils.Write(RegistryUtils.BOOKMARKS, bookmarksString)
    m.bookmarksString = bookmarksString
end function

function AddBookmarkGroup(groupName as string) as object
    node = CreateObject("roSGNode", "ContentNode")
    node.id = CryptoUtils.GetMd5(groupName)
    node.title = groupName
    m.top.content.appendChild(node)
    LogInfo("Added bookmark group:", groupName)
    return node
end function

function AddBookmark(bookmarkType as string, id as string, groupName as string)
    groupNode = m.top.content.findNode(CryptoUtils.GetMd5(groupName))
    if groupNode = invalid
        groupNode = AddBookmarkGroup(groupName)
    end if

    node = CreateObject("roSGNode", "ContentNode")
    node.id = id
    node.addFields({
        type: bookmarkType,
        itemId: id
    })
    groupNode.insertChild(node, 0)
    LogInfo("Added bookmark:", id)
    m.top.contentChange = true
end function

function AddFeedSourceBookmark(feedSource as object)
    title = feedSource.title
    id = CryptoUtils.GetMd5(title)
    bookmarkGroupNode = m.top.content.findNode(id)
    if bookmarkGroupNode = invalid
        bookmarkGroupNode = AddBookmarkGroup(title)
    end if

    feedSource.Delete("state")

    node = CreateObject("roSGNode", "ContentNode")
    node.id = id
    node.addFields({
        type: "feedSource",
        itemId: id,
        feedSource: feedSource
    })
    bookmarkGroupNode.insertChild(node, 0)
    LogInfo("Added feedSource bookmark:", title, "id:", id)
    m.top.contentChange = true
end function

function RemoveBookmark(id as string) as void
    node = m.top.content.findNode(id)
    if node = invalid
        return
    end if

    group = node.getParent()
    group.removeChild(node)
    LogInfo("Removed bookmark:", id)

    if group.getChildCount() = 0
        m.top.content.removeChild(group)
        LogInfo("Removed bookmark group:", group.title)
    end if
    m.top.contentChange = true
end function

function OnContentChange(event as object) as void
    Save()
end function

function GetContextMenuOptionsForItem(item as object) as object
    options = []
    if item.type = "video"
        options.append(GetMenuForVideo(item))
    else if item.type = "playlist"
        options.append(GetMenuForPlaylist(item))
    else if item.type = "channel"
        options.append(GetMenuForChannel(item))
    end if
    options.append(GetMenuForParentFeedSource(item))
    return options
end function

function GetMenuForVideo(videoNode as object) as object
    videoId = videoNode.videoId
    if StringUtils.IsNullOrEmpty(videoId)
        return []
    end if

    menu = []
    isInBookmarks = m.top.content.findNode(videoId) <> invalid
    if isInBookmarks
        item = ContextMenuUtils.CreateOption("Remove from bookmarks", m.top, "RemoveBookmark", [videoId])
        menu.push(item)
    else
        item = ContextMenuUtils.CreateOption(`Add to "${VIDEOS_GROUP}" bookmark`, m.top, "AddBookmark", ["video", videoId, VIDEOS_GROUP])
        menu.push(item)
    end if
    return menu
end function

function GetMenuForPlaylist(playlistNode as object) as object
    playlistId = playlistNode.playlistId
    if StringUtils.IsNullOrEmpty(playlistId) or playlistId.StartsWith("IV")
        return []
    end if

    menu = []
    ' TODO:P0 create function for checking if a bookmark exists
    ' Function should rely on bookmarks, not nodes in content
    isInBookmarks = m.top.content.findNode(playlistId) <> invalid
    if isInBookmarks
        item = ContextMenuUtils.CreateOption("Remove from bookmarks", m.top, "RemoveBookmark", [playlistId])
        menu.push(item)
    else
        item = ContextMenuUtils.CreateOption(`Add to "${PLAYLISTS_GROUP}" bookmark`, m.top, "AddBookmark", ["playlist", playlistId, PLAYLISTS_GROUP])
        menu.push(item)

        item = ContextMenuUtils.CreateOption(`Add to "${playlistNode.title}" bookmark`, m.top, "AddBookmark", ["playlist", playlistId, playlistNode.title])
        menu.push(item)
    end if
    return menu
end function

function GetMenuForChannel(channelNode as object) as object
    authorId = channelNode.authorId
    if StringUtils.IsNullOrEmpty(authorId)
        return []
    end if

    menu = []
    isInBookmarks = m.top.content.findNode(authorId) <> invalid
    if isInBookmarks
        item = ContextMenuUtils.CreateOption("Remove from bookmarks", m.top, "RemoveBookmark", [authorId])
        menu.push(item)
    else
        item = ContextMenuUtils.CreateOption(`Add to "${CHANNELS_GROUP}" bookmark`, m.top, "AddBookmark", ["channel", authorId, CHANNELS_GROUP])
        menu.push(item)

        item = ContextMenuUtils.CreateOption(`Add to "${channelNode._author}" bookmark`, m.top, "AddBookmark", ["channel", authorId, channelNode._author])
        menu.push(item)
    end if
    return menu
end function

function GetMenuForParentFeedSource(itemNode as object) as object
    if itemNode = invalid
        return []
    end if
    if itemNode.type <> "video" and itemNode.type <> "playlist" and itemNode.type <> "channel"
        return []
    end if
    if not IsInt(itemNode.feedSourcesIndex) or itemNode.feedSourcesIndex = -1
        return []
    end if
    feedContentNode = itemNode.getParent()
    if feedContentNode = invalid or feedContentNode.subtype() <> "FeedContentNode"
        return []
    end if

    feedSource = feedContentNode.feedSources[itemNode.feedSourcesIndex]

    title = feedSource.title
    feedSourceId = CryptoUtils.GetMd5(title)

    menu = []
    isInBookmarks = m.top.content.findNode(feedSourceId) <> invalid

    if isInBookmarks
        item = ContextMenuUtils.CreateOption("Remove from bookmarks", m.top, "RemoveBookmark", [feedSourceId])
        menu.push(item)
    else
        item = ContextMenuUtils.CreateOption(`Add to "${title}" bookmark`, m.top, "AddFeedSourceBookmark", [feedSource])
        menu.push(item)
    end if
    return menu
end function
