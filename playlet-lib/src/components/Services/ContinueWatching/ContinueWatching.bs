' TODO:P0
' - Add router that returns videos for continue watching, including watch date and progress (returns them sorted and paginated) - DONE
'   - It would return small page size (like 5) but includes video info? - DONE
' - Add a node for storing videos in memory, and write to registry, with a limit of 100 videos - DONE
'   - Should contain a subnode for each video, so that renderers can observe changes - DONE
' - Add settings
'   - Enable/disable continue watching
'   - Max days to keep videos (videos expire based on last watch date)
'   - Video count (capped at 100)
'   - A button to clear all videos
'   - Web app controls - DONE
' - Videos with about 95% progress (capped at 20 seconds) should be considered watched - DONE
' - Add progress bar to video cell (this means "progressNode" is going to be a field in VideoContentNode) - DONE
'   - Also add it to PlaylistViewCell - DONE
' - Add support for web app
'   - Rendering the new feed
'   - Casting / Queuing the video should continue from the last watch position
' - Handle case where existing VideoContentNode is not aware of VideoProgressContentNode created later
' - Continue watching feed need to be reactive to change in the continue watching list
' - Introduce concept of hidden feed if empty

import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/Types.bs"

const MAX_VIDEOS = 100

function Init()
    m.top.content = m.top.findNode("content")
    m.continueWatchingString = ""
    Load()
end function

function Load() as void
    continueWatchingString = RegistryUtils.Read(RegistryUtils.CONTINUE_WATCHING)
    if continueWatchingString = invalid
        return
    end if

    m.continueWatchingString = continueWatchingString
    continueWatching = ParseJson(continueWatchingString)
    if continueWatching = invalid
        LogWarn("Failed to parse continue watching json")
        return
    end if

    nodes = []
    for each video in continueWatching.videos
        node = CreateObject("roSGNode", "VideoProgressContentNode")
        node.id = video.id
        node.videoId = video.id
        node.date = ValidInt(video.date)
        node.timestamp = ValidInt(video.timestamp)
        node.duration = ValidInt(video.duration)
        nodes.push(node)
    end for

    content = m.top.content
    content.removeChildrenIndex(content.getChildCount(), 0)
    content.appendChildren(nodes)
end function

function Save() as void
    nodes = m.top.content.getChildren(-1, 0)
    if nodes.Count() = 0
        RegistryUtils.Delete(RegistryUtils.CONTINUE_WATCHING)
        return
    end if

    videos = []
    for each node in nodes
        video = {}
        video.id = node.videoId
        video.date = node.date
        video.timestamp = node.timestamp
        video.duration = node.duration
        videos.push(video)
    end for

    videos.SortBy("date", "r")

    ' The registry has a limit of 32KB, so we need to limit the number of videos
    ' regardless of user settings
    while videos.Count() > MAX_VIDEOS
        videos.pop()
    end while

    continueWatchingString = FormatJson({
        "__version": m.top.__version,
        "videos": videos
    })

    if m.continueWatchingString = continueWatchingString
        return
    end if

    RegistryUtils.Write(RegistryUtils.CONTINUE_WATCHING, continueWatchingString)
    m.continueWatchingString = continueWatchingString
end function
