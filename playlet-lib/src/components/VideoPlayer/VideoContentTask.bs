import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"

@asynctask
function VideoContentTask(input as object) as object
    contentNode = input.content
    invidiousNode = input.invidious
    preferencesNode = input.preferences
    playletServerPort = input.playletServerPort

    if m.top.cancel
        return invalid
    end if

    if StringUtils.IsNullOrEmpty(contentNode.videoId)
        throw "Can't load video information: videoId is missing"
    end if

    service = new Invidious.InvidiousService(invidiousNode)

    backend = preferencesNode["playback.backend"]
    if backend = "playlet"
        response = InnertubeService.GetVideoMetadata(contentNode.videoId, { cancellation: m.top.cancellation })
    else
        response = service.GetVideoMetadata(contentNode.videoId, { cancellation: m.top.cancellation })
    end if

    if m.top.cancel
        return invalid
    end if

    metadata = response.Json()

    if not response.IsSuccess() or metadata = invalid
        errorMessage = response.ErrorMessage()
        knownIssue = `{"error":"This helps protect our community. Learn more"}`

        if errorMessage.InStr(knownIssue) <> -1
            errorMessage = `NOTE: Please see the following link for more information about the error\nhttps://github.com/iBicha/playlet/issues/400\n` + errorMessage
        end if

        return {
            success: false
            error: errorMessage
        }
    end if

    contentNode.title = metadata.title
    contentNode.secondaryTitle = metadata.author
    contentNode.live = metadata.liveNow

    if IsString(metadata.error)
        ' Adding metadata allows us to play next recommended video after displaying the error
        contentNode.addFields({ metadata: metadata })

        return {
            success: false
            error: metadata.error
        }
    end if

    streamUrls = CreateStreamUrls(metadata, service, preferencesNode, playletServerPort)
    contentNode.addFields({
        metadata: metadata
        ' StreamUrls is taken
        playletStreamUrls: streamUrls
        playletStreamUrlIndex: 0
    })

    contentNode.url = streamUrls[0]

    SetCaptions(metadata, service, contentNode)

    if metadata.liveNow = true
        contentNode.Live = true
    end if

    return {
        success: true
    }
end function

function CreateStreamUrls(metadata as object, service as Invidious.InvidiousService, preferences as object, playletServerPort as integer) as object
    instance = service.GetInstance()
    proxyVideos = preferences["invidious.proxy_videos"]

    streamUrls = []

    if metadata.hlsUrl <> invalid
        AddHlsUrls(streamUrls, metadata, proxyVideos, playletServerPort)
    else
        preferredQuality = preferences["playback.preferred_quality"]

        if preferredQuality = "auto"
            AddDashUrls(streamUrls, metadata, proxyVideos, playletServerPort)
            AddStreamUrls(streamUrls, metadata, service, proxyVideos, preferredQuality)
        else
            AddStreamUrls(streamUrls, metadata, service, proxyVideos, preferredQuality)
            AddDashUrls(streamUrls, metadata, proxyVideos, playletServerPort)
        end if
    end if

    AddInstanceToUrlIfNeeded(streamUrls, instance)

    return streamUrls
end function

function AddHlsUrls(streamUrls as object, metadata as object, proxyVideos as string, playletServerPort as integer)
    hlsUrl = metadata.hlsUrl
    if hlsUrl.StartsWith("/api/manifest")
        hlsUrl = "https://manifest.googlevideo.com" + hlsUrl
    end if
    hlsUrlLocal = AddLocalFlag(hlsUrl)

    ' Redirect to Playet's local web server, where we will be
    ' dynamically adding storyboards
    hlsUrl = `http://127.0.0.1:${playletServerPort}/api/hls?url=${hlsUrl.EncodeUriComponent()}`

    AddUrls(streamUrls, hlsUrl, hlsUrlLocal, proxyVideos)
end function

function AddDashUrls(streamUrls as object, metadata as object, proxyVideos as string, playletServerPort as integer) as void
    ' Redirect to Playet's local web server, where will will be
    ' dynamically generating the DASH manifest, instead of metadata.dashUrl
    dashUrl = `http://127.0.0.1:${playletServerPort}/api/dash?v=${metadata.videoId}`

    dashUrlLocal = AddLocalFlag(dashUrl)
    AddUrls(streamUrls, dashUrl, dashUrlLocal, proxyVideos)
end function

function AddStreamUrls(streamUrls as object, metadata as object, service as Invidious.InvidiousService, proxyVideos as string, preferredQuality as string) as void
    if metadata.formatStreams = invalid or metadata.formatStreams.Count() = 0
        return
    end if

    itag = invalid
    ' If we prefer medium quality, we check if we have a 360p or 480p streams
    if preferredQuality = "medium"
        ' These are roughly the itags for 360p and 480p
        ' Most videos will hit 18, which is 360p
        mediumItags = {
            "18": true
            "43": true
            "44": true
            "82": true
            "83": true
            "101": true
        }
        for each formatStream in metadata.formatStreams
            if mediumItags[ValidString(formatStream.itag)] = true
                itag = formatStream.itag
                exit for
            end if
        end for
    end if

    url = service.GetVideoStreamUrl(metadata.videoId, itag)
    localUrl = AddLocalFlag(url)

    AddUrls(streamUrls, url, localUrl, proxyVideos)
end function

function AddLocalFlag(url as string) as string
    if url.InStr("?") = -1
        return url + "?local=true"
    else
        return url + "&local=true"
    end if
end function

function AddUrls(streamUrls as object, url as string, localUrl as string, proxyVideos as string)
    if proxyVideos = "if_needed"
        streamUrls.push(url)
        streamUrls.push(localUrl)
    else if proxyVideos = "never"
        streamUrls.push(url)
    else if proxyVideos = "always"
        streamUrls.push(localUrl)
    else
        streamUrls.push(url)
        streamUrls.push(localUrl)
    end if
end function

function AddInstanceToUrlIfNeeded(streamUrls as object, instance as string)
    for i = 0 to streamUrls.Count() - 1
        url = streamUrls[i]
        if url.StartsWith("/")
            streamUrls[i] = instance + url
        end if
    end for
end function

function SetCaptions(metadata as object, service as object, contentNode as object) as void
    if metadata.captions.Count() = 0
        return
    end if

    ' TODO:P2 we don't need to read and parse this every time
    isoLanguageList = ParseJson(ReadAsciiFile("libpkg:/config/ISO-639-1-to-ISO-639-2T.json5"))
    instance = service.GetInstance()

    subtitleTracks = []

    for each caption in metadata.captions
        code = caption.language_code
        if StringUtils.IsNullOrEmpty(code)
            continue for
        end if

        if code.InStr("-") <> -1
            code = code.Split("-")[0]
        end if

        if code.len() = 2
            if not isoLanguageList.DoesExist(code)
                continue for
            end if
            code = isoLanguageList[code]
        end if

        url = caption.url
        if not url.StartsWith("http")
            url = instance + url
        end if

        subtitleTracks.Push({
            Description: caption.label
            Language: code
            TrackName: url
        })
    end for

    contentNode.ClosedCaptions = True
    contentNode.SubtitleTracks = subtitleTracks
end function
