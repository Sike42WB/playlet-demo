import "pkg:/components/Services/Invidious/InvidiousService.bs"

@asynctask
function VideoContentTask(input as object) as object
    contentNode = input.content
    invidiousNode = input.invidious
    preferencesNode = input.preferences
    playletServerUrl = input.playletServerUrl

    if m.top.cancel
        return invalid
    end if

    if StringUtils.IsNullOrEmpty(contentNode.videoId)
        throw "Can't load video information: videoId is missing"
    end if

    service = new Invidious.InvidiousService(invidiousNode)

    response = service.GetVideoMetadata(contentNode.videoId, m.top.cancellation)

    if m.top.cancel
        return invalid
    end if

    metadata = response.Json()

    if not response.IsSuccess() or metadata = invalid
        return {
            success: false,
            error: response.ErrorMessage()
        }
    end if

    contentNode.title = metadata.title
    contentNode.secondaryTitle = metadata.author

    streamUrls = CreateStreamUrls(metadata, service, preferencesNode, playletServerUrl)
    contentNode.url = streamUrls[0]

    SetCaptions(metadata, service, contentNode)

    contentNode.addFields({
        metadata: metadata,
        ' StreamUrls is taken
        playletStreamUrls: streamUrls,
        playletStreamUrlIndex: 0
    })

    return {
        success: true
    }
end function

function CreateStreamUrls(metadata as object, service as Invidious.InvidiousService, preferences as object, playletServerUrl as string) as object
    instance = service.GetInstance()
    proxyVideos = preferences["invidious.proxy_videos"]

    streamUrls = []

    if metadata.hlsUrl <> invalid
        AddHlsUrls(streamUrls, metadata, proxyVideos)
    else
        preferredQuality = preferences["playback.preferred_quality"]

        if preferredQuality = "720p"
            AddStreamUrls(streamUrls, metadata, service, proxyVideos)
            AddDashUrls(streamUrls, metadata, proxyVideos, playletServerUrl)
        else
            AddDashUrls(streamUrls, metadata, proxyVideos, playletServerUrl)
            AddStreamUrls(streamUrls, metadata, service, proxyVideos)
        end if
    end if

    AddInstanceToUrlIfNeeded(streamUrls, instance)

    return streamUrls
end function

function AddHlsUrls(streamUrls as object, metadata as object, proxyVideos as string)
    hlsUrl = metadata.hlsUrl
    hlsUrlLocal = AddLocalFlag(hlsUrl)

    AddUrls(streamUrls, hlsUrl, hlsUrlLocal, proxyVideos)
end function

function AddDashUrls(streamUrls as object, metadata as object, proxyVideos as string, playletServerUrl as string) as void
    #if LOCAL_DASH
        ' Redirect to Playet's local web server, where will will be
        ' dynamically generating the DASH manifest.
        dashUrl = `${playletServerUrl}/api/dash?v=${metadata.videoId}`
    #else
        if metadata.dashUrl = invalid
            return
        end if

        dashUrl = metadata.dashUrl
    #end if

    dashUrlLocal = AddLocalFlag(dashUrl)
    AddUrls(streamUrls, dashUrl, dashUrlLocal, proxyVideos)
end function

function AddStreamUrls(streamUrls as object, metadata as object, service as Invidious.InvidiousService, proxyVideos as string) as void
    if metadata.formatStreams = invalid or metadata.formatStreams.Count() = 0
        return
    end if

    url = service.GetVideoStreamUrl(metadata.videoId)
    localUrl = AddLocalFlag(url)

    AddUrls(streamUrls, url, localUrl, proxyVideos)
end function

function AddLocalFlag(url as string) as string
    if url.InStr("?") = -1
        return url + "?local=true"
    else
        return url + "&local=true"
    end if
end function

function AddUrls(streamUrls as object, url as string, localUrl as string, proxyVideos as string)
    if proxyVideos = "if_needed"
        streamUrls.push(url)
        streamUrls.push(localUrl)
    else if proxyVideos = "never"
        streamUrls.push(url)
    else if proxyVideos = "always"
        streamUrls.push(localUrl)
    else
        streamUrls.push(url)
        streamUrls.push(localUrl)
    end if
end function

function AddInstanceToUrlIfNeeded(streamUrls as object, instance as string)
    for i = 0 to streamUrls.Count() - 1
        url = streamUrls[i]
        if url.StartsWith("/")
            streamUrls[i] = instance + url
        end if
    end for
end function

' TODO:P2
' Captions are rate limited https://github.com/iv-org/invidious/issues/2567
' It's possible to loop through a list of backup instances hoping to find working subtitles.
' Caveat: searching for a working caption could cause a delay in the video player start.
function SetCaptions(metadata as object, service as object, contentNode as object) as void
    if metadata.captions.Count() = 0
        return
    end if
    ' TODO:P2 we don't need to read and parse this every time
    isoLanguageList = ParseJson(ReadAsciiFile("libpkg:/config/ISO-639-1-to-ISO-639-2T.json5"))
    instance = service.GetInstance()

    subtitleTracks = []

    for each caption in metadata.captions
        subtitleTracks.Push({
            Description: caption.label,
            Language: isoLanguageList[caption.language_code] ?? caption.language_code,
            TrackName: instance + caption.url
        })
    end for

    contentNode.ClosedCaptions = True
    contentNode.SubtitleTracks = subtitleTracks
end function

