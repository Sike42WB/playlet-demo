import "pkg:/components/Dialog/DialogUtils.bs"
import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"
import "pkg:/components/VideoPlayer/Lounge.bs"
import "pkg:/components/VideoPlayer/SponsorBlock.bs"
import "pkg:/components/VideoPlayer/VideoPlayerStyle.bs"
import "pkg:/components/VideoQueue/VideoQueueUtils.bs"
import "pkg:/source/AsyncTask/AsyncTask.bs"
import "pkg:/source/AsyncTask/Tasks.bs"
import "pkg:/source/utils/ErrorUtils.bs"
import "pkg:/source/utils/Logging.bs"

function Init()
    SetPlayerStyle()
    SetupAnimation()
    m.fullScreenHint = m.top.findNode("fullScreenHint")
    m.fullScreenHintLabel = m.top.findNode("fullScreenHintLabel")
    m.fullScreenHintTimer = m.top.findNode("fullScreenHintTimer")
    m.fullScreenHintTimer.ObserveField("fire", FuncName(OnFullScreenHintTimer))

    ' videoPlayingSuccess indicates if we started playing a video successfully
    ' We use it to detect if we should try another link for a video, or if another error
    ' occurred (such as a network error)
    m.videoPlayingSuccess = false
    ' ignoreNextFinishedState indicates if we should ignore the next finished state
    ' This is used to prevent the video from playing the next video when we are
    ' still trying to find a working stream url
    m.ignoreNextFinishedState = false

    ' asyncStopSemantics available since Roku OS 12.5
    ' It is set to true because stopping synchronously causes timeout and crash
    ' Usually we would need to wait for the video state to move to "stopping" then to "stopped"
    ' before considering the video node closed, and creating a new one.
    ' However, since we have a task to load video details, there should be enough time for the
    ' video node to close before we create a new one.
    if m.top.hasField("asyncStopSemantics")
        m.top.asyncStopSemantics = true
    end if
end function

function OnNodeReady()
    minRect = m.top.minRect
    rect = m.container.fullscreen ? m.top.maxRect : minRect

    m.top.width = rect.width
    m.top.height = rect.height
    m.top.translation = [rect.x, rect.y]

    m.fullScreenHint.width = minRect.width
    m.fullScreenHintLabel.width = minRect.width
    m.fullScreenHint.translation = [0, minRect.height - m.fullScreenHint.height]

    ' TODO:P2 show a loading spinner if video is loading minimized
    m.top.enableUI = m.container.fullscreen
    m.top.showFullScreenHint = not m.container.fullscreen

    m.container.observeFieldScoped("fullscreen", FuncName(OnFullScreenChange))
    m.top.ObserveField("state", FuncName(OnVideoPlayerStateChange))

    SponsorBlock.SetupSponsorBlock()
end function

function PlayWithContent(contentNode as object)
    videoContentNode = CreateObject("roSGNode", "ContentNode")

    if not StringUtils.IsNullOrEmpty(contentNode.videoId)
        videoContentNode.AddFields({ videoId: contentNode.videoId })
    end if
    if IsInt(contentNode.timestamp)
        videoContentNode.AddFields({ timestamp: contentNode.timestamp })
    end if
    if not StringUtils.IsNullOrEmpty(contentNode.title)
        videoContentNode.title = contentNode.title
    end if
    ' NOTE: "_author" not "author". See PlaylistContentNode.xml for explanation.
    if not StringUtils.IsNullOrEmpty(contentNode._author)
        videoContentNode.secondaryTitle = contentNode._author
    end if

    StartVideoContentTask(videoContentNode)
    Lounge.SendNowPlayingLoading(contentNode.videoId)
end function

function StartVideoContentTask(videoContentNode as object)
    if m.videoContentTask <> invalid
        m.videoContentTask.cancel = true
    end if

    MarkVideoWatched(videoContentNode.videoId)

    m.top.content = videoContentNode

    m.videoContentTask = AsyncTask.Start(Tasks.VideoContentTask, {
        content: videoContentNode
        invidious: m.top.invidious
        preferences: m.top.preferences
        playletServerPort: m.top.webServer.port
    }, OnVideoContentTaskResults)
end function

function OnVideoContentTaskResults(output as object) as void
    m.videoContentTask = invalid
    if output.cancelled
        return
    end if

    if not output.success or not output.result.success
        ' output.error for unhandled exception
        error = output.error
        if error = invalid
            ' output.result.error for network errors
            error = output.result.error
        end if
        error = ErrorUtils.Format(error)
        LogError(error)
        videoId = output.task.input.content.videoId
        message = `Failed to load video information for ${videoId}\n${error}`
        DialogUtils.ShowDialog(message, "Video load fail", true)
        ' TODO:P1 play next video in the queue after showing the error dialog
        m.videoQueue.closePlayer = true
        Lounge.SendOnStateChange()
        return
    end if

    content = m.top.content
    SponsorBlock.FetchSponsorBlock(content.metadata)

    if content.Live = true
        duration = m.top.duration
        if duration > 0
            SeekToEndOfStream()
        else
            m.top.ObserveField("duration", FuncName(SeekToEndOfStream))
        end if
    end if

    m.top.control = "play"
    if ValidInt(m.top.content.timestamp) > 0
        m.top.seek = m.top.content.timestamp
    end if
end function

function MarkVideoWatched(videoId as string)
    if m.top.invidious.authToken <> invalid
        AsyncTask.Start(Tasks.MarkVideoWatchedTask, {
            videoId: videoId
            invidious: m.top.invidious
        })
    end if
end function

function Close(_unused as dynamic)
    if m.videoContentTask <> invalid
        m.videoContentTask.cancel = true
        m.videoContentTask = invalid
    end if
    if m.sponsorBlockTask <> invalid
        m.sponsorBlockTask.cancel = true
        m.sponsorBlockTask = invalid
    end if

    parent = m.top.getParent()
    if parent <> invalid
        parent.RemoveChild(m.top)
    end if
    SponsorBlock.RemoveNotifcation(m.notifications)

    ' Stopping a video is slow and synchronous, and can lead to execution timeout crashes.
    try
        m.top.control = "stop"
    catch error
        DialogUtils.ShowDialog(ErrorUtils.Format(error), "Error closing video", true)
    end try

    m.top.content = invalid
end function

function OnVideoPlayerStateChange() as void
    Lounge.SendOnStateChange()

    state = m.top.state
    content = m.top.content
    ' If we successfully played the video, then any error that comes later is not due to a 403 (FORBIDDEN).
    ' This is to reduce false positives, as we do not want retry another link if the first link is working fine.
    if state = "playing" and not m.videoPlayingSuccess
        LogInfo(`Now playing video ${content.url}`)
        m.videoPlayingSuccess = true
    end if

    if state = "error"
        errorInfo = m.top.errorInfo
        LogError(`Error playing video ${content.videoId}`, errorInfo)
        if m.videoPlayingSuccess <> true
            ' http for stream format, mediaerror for DASH
            if errorInfo.category = "http" or errorInfo.category = "mediaerror"
                currentUrl = content.url
                playletStreamUrls = content.playletStreamUrls
                playletStreamUrlIndex = content.playletStreamUrlIndex
                playletStreamUrlIndex++
                content.playletStreamUrlIndex = playletStreamUrlIndex
                if playletStreamUrlIndex < playletStreamUrls.Count()
                    nextUrl = playletStreamUrls[playletStreamUrlIndex]
                    LogError(`Stream ${currentUrl} failed to play. Trying next stream ${nextUrl}`)

                    content.url = nextUrl
                    ' This video errored, and is about to finish, so don't close the video yet
                    ' That's why we should ignore the next "finished" event
                    m.ignoreNextFinishedState = true
                    m.top.control = "play"

                    if ValidInt(content.timestamp) > 0
                        m.top.seek = content.timestamp
                    end if
                    return
                end if
            end if
        end if
    end if

    if state = "finished" and m.ignoreNextFinishedState = true
        m.ignoreNextFinishedState = false
        return
    end if

    if state = "finished"
        OnVideoFinished()
        return
    end if

    if state = "error"
        messageLines = []
        messageLines.push(`errorMsg: ${m.top.errorMsg}`)
        messageLines.push(`errorCode: ${m.top.errorCode}`)
        messageLines.push(`errorStr: ${m.top.errorStr}`)

        errorInfo = m.top.errorInfo
        if errorInfo <> invalid
            for each info in errorInfo
                messageLines.push(`${info}: ${errorInfo[info]}`)
            end for
        end if

        title = `Error playing video ${content.videoId}`
        LogError(title, messageLines)
        DialogUtils.ShowDialog(messageLines, title, true)
        ' TODO:P1 play next video in the queue after showing the error dialog
        m.videoQueue.closePlayer = true
    end if
end function

function SeekToEndOfStream()
    m.top.UnobserveField("duration")
    duration = m.top.duration
    if duration > 0
        LogInfo("Seeking to end of live stream", duration)
        m.top.seek = duration
    end if
end function

function OnVideoFinished() as void
    if not VideoQueueUtils.PlayNext(m.videoQueue, m.invidious, m.preferences)
        m.videoQueue.closePlayer = true
    end if
end function

function OnkeyEvent(key as string, press as boolean) as boolean
    if press = false
        return false
    end if
    ' Unfortunately, a Video node cannot capture the "options" key (because, Roku...)
    ' https://community.roku.com/t5/Roku-Developer-Program/Bug-in-10-0-1-Options-key-is-not-being-consumed-by-onKeyEvent-when-Video-node-is-in-focus/m-p/709200/highlight/true#M49312
    ' Because of that, the button "down" is used to shrink the video for picture in picture mode
    if key = "down"
        if VideoQueueUtils.ToggleVideoPictureInPicture(m.videoQueue)
            return true
        end if
    end if

    if key = "back"
        m.videoQueue.closePlayer = true
        return true
    end if
    return false
end function

function SetupAnimation()
    m.minimizeAnimation = m.top.findNode("minimizeAnimation")
    m.widthInterpolator = m.top.findNode("widthInterpolator")
    m.heightInterpolator = m.top.findNode("heightInterpolator")
    m.translationInterpolator = m.top.findNode("translationInterpolator")

    minRect = m.top.minRect
    maxRect = m.top.maxRect

    m.widthInterpolator.keyValue = [maxRect.width, (maxRect.width + minRect.width) / 2, minRect.width]
    m.heightInterpolator.keyValue = [maxRect.height, (maxRect.height + minRect.height) / 2, minRect.height]
    maxTranslation = [maxRect.x, maxRect.y]
    minTranslation = [minRect.x, minRect.y]
    midTranslation = [(maxRect.x + minRect.x) / 2, (maxRect.y + minRect.y) / 2]
    m.translationInterpolator.keyValue = [maxTranslation, midTranslation, minTranslation]
end function

function OnFullScreenChange()
    m.widthInterpolator.reverse = m.container.fullscreen
    m.heightInterpolator.reverse = m.container.fullscreen
    m.translationInterpolator.reverse = m.container.fullscreen

    m.minimizeAnimation.control = "start"

    m.top.enableUI = m.container.fullscreen
    m.top.showFullScreenHint = not m.container.fullscreen

    SponsorBlock.SetVisible(m.notifications, m.container.fullscreen)
end function

function OnShowFullScreenHint() as void
    m.fullScreenHintTimer.control = "stop"

    if m.container.fullscreen
        m.fullScreenHint.visible = false
        return
    end if

    if m.top.showFullScreenHint
        ' Take 1 second until the shrink animation finishes to show the hint
        m.fullScreenHintTimer.duration = 1
    else
        ' Wait 5 seconds then hide the hint
        m.fullScreenHintTimer.duration = 5
    end if

    m.fullScreenHintTimer.control = "start"
end function

function OnFullScreenHintTimer()
    showFullScreenHint = m.top.showFullScreenHint
    m.fullScreenHint.visible = showFullScreenHint
    if showFullScreenHint
        m.top.showFullScreenHint = false
    end if
end function
