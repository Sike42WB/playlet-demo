import "pkg:/source/asyncTask/asyncTask.bs"
import "pkg:/components/VideoPlayer/VideoContentTask.bs"
import "pkg:/components/VideoPlayer/VideoPlayerStyle.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/components/VideoPlayer/VideoUtils.bs"
import "pkg:/components/VideoPlayer/MarkVideoWatchedTask.bs"

function Init()
    m.log = new log.Logger("VideoPlayer")
    SetPlayerStyle()
    SetupAnimation()
end function

function OnNodeReady()
    width = 1280
    height = 720
    translation = [0.0, 0.0]

    if not m.container.fullscreen
        width = 426
        height = 240
        translation = [834.0, 460.0]
    end if

    m.top.width = width
    m.top.height = height
    m.top.translation = translation

    ' TODO:P2 show a loading spinner if video is loading minimized
    m.top.enableUI = m.container.fullscreen

    m.container.observeFieldScoped("fullscreen", "OnFullScreenChange")
end function

function PlayWithContent(contentNode as object)
    videoContentNode = CreateObject("roSGNode", "ContentNode")

    if not StringUtils.IsNullOrEmpty(contentNode.videoId)
        videoContentNode.AddFields({ videoId: contentNode.videoId })
    end if
    if IsInt(contentNode.timestamp)
        videoContentNode.AddFields({ timestamp: contentNode.timestamp })
    end if
    if not StringUtils.IsNullOrEmpty(contentNode.title)
        videoContentNode.title = contentNode.title
    end if
    if not StringUtils.IsNullOrEmpty(contentNode.author)
        videoContentNode.secondaryTitle = contentNode.author
    end if

    StartVideoContentTask(videoContentNode)
end function

function PlayWithVideoId(videoId as string, timestamp = 0 as integer)
    videoContentNode = CreateObject("roSGNode", "ContentNode")
    videoContentNode.AddFields({ videoId: videoId, timestamp: timestamp })

    StartVideoContentTask(videoContentNode)
end function

function StartVideoContentTask(videoContentNode as object)
    if m.videoContentTask <> invalid
        m.videoContentTask.control = "stop"
    end if

    MarkVideoWatched(videoContentNode.videoId)

    m.top.content = videoContentNode

    m.videoContentTask = StartAsyncTask(VideoContentTask, {
        content: videoContentNode,
        invidious: m.top.invidious,
        preferences: m.top.preferences
    }, OnVideoContentTaskResults)
end function

function OnVideoContentTaskResults(output as object) as void
    if not output.success
        ' TODO:P0 show error - unhandled error
        return
    end if

    if not output.result.success
        ' TODO:P0 show error - request error
        return
    end if

    m.top.control = "play"
    if ValidInt(m.top.content.timestamp) > 0
        ' TODO:P0 handle seeking in the case where the first stream url failed
        m.top.seek = m.top.content.timestamp
    end if
end function

function MarkVideoWatched(videoId as string)
    if m.top.invidious.authToken <> invalid
        StartAsyncTask(MarkVideoWatchedTask, {
            videoId: videoId,
            invidious: m.top.invidious
        })
    end if
end function

function Close(unused as dynamic)
    m.top.control = "stop"
    m.top.content = invalid
    parent = m.top.getParent()
    if parent <> invalid
        parent.RemoveChild(m.top)
    end if
end function

function OnkeyEvent(key as string, press as boolean) as boolean
    if press = false
        return false
    end if
    ' Unfortunately, a Video node cannot capture the "options" key (because, Roku...)
    ' https://community.roku.com/t5/Roku-Developer-Program/Bug-in-10-0-1-Options-key-is-not-being-consumed-by-onKeyEvent-when-Video-node-is-in-focus/m-p/709200/highlight/true#M49312
    ' Because of that, the button "down" is used to shrink the video for picture in picture mode
    if key = "down"
        if VideoUtils.ToggleVideoPictureInPicture()
            return true
        end if
    end if

    if key = "back"
        VideoUtils.CloseVideo()
        return true
    end if
    return false
end function

function SetupAnimation()
    m.minimizeAnimation = m.top.findNode("minimizeAnimation")
    m.widthInterpolator = m.top.findNode("widthInterpolator")
    m.heightInterpolator = m.top.findNode("heightInterpolator")
    m.translationInterpolator = m.top.findNode("translationInterpolator")
end function

function OnFullScreenChange()
    m.widthInterpolator.reverse = m.container.fullscreen
    m.heightInterpolator.reverse = m.container.fullscreen
    m.translationInterpolator.reverse = m.container.fullscreen

    m.minimizeAnimation.control = "start"

    m.top.enableUI = m.container.fullscreen
end function
