import "pkg:/source/utils/Types.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/asyncTask/asyncTask.bs"
import "pkg:/components/VideoFeed/VideoRowListContentTask.bs"
import "pkg:/components/VideoFeed/VideoRowListRowContentTask.bs"
import "pkg:/source/utils/ErrorUtils.bs"
import "pkg:/components/Dialog/DialogUtils.bs"
import "pkg:/components/VideoPlayer/VideoUtils.bs"
import "pkg:/components/PlaylistView/PlaylistUtils.bs"
import "pkg:/components/ChannelView/ChannelUtils.bs"
import "pkg:/components/Navigation/LongPress.bs"

' TODO:P1 add the option to remove a row if it does not have any content
' E.g. NBC News does not return any related chnanels
function Init()
    m.pendingLoadTasks = {}
end function

function OnNodeReady()
    m.top.ObserveField("itemFocused", FuncName(OnItemFocused))
    m.top.ObserveField("rowItemFocused", FuncName(OnRowItemFocused))
    m.top.observeField("focusedChild", FuncName(OnFocusedChildChange))
    m.top.ObserveField("visible", FuncName(OnVisibilityChange))

    m.invidious.ObserveFieldScoped("authToken", FuncName(OnAuthTokenChange))
    InitializeLongPressTimer()
end function

function OnFocusedChildChange() as void
    if m.top.hasFocus()
        LoadRowsIfNeeded()
    end if
end function

function OnVisibilityChange()
    if m.top.visible = true
        LoadRowsIfNeeded()
    end if
end function

function OnContentData() as void
    InitContent()
end function

function OnItemFocused()
    LoadRowsIfNeeded()
end function

function OnRowItemFocused(event as object) as void
    index = event.GetData()
    rowIndex = index[0]
    rowItemIndex = index[1]

    row = m.top.content.GetChild(rowIndex)
    if not row.loadState = FeedLoadState.LoadedPage
        return
    end if
    ' As we get close to the end of the row, load more content
    if rowItemIndex > row.getChildCount() - 5
        LoadRowContent(row)
    end if
end function

function OnRowItemSelected(index as object) as void
    content = m.top.content
    if content = invalid
        return
    end if

    rowIndex = index[0]
    rowItemIndex = index[1]

    if rowIndex < 0 or rowIndex >= content.GetChildCount()
        LogWarn("Invalid row index:", rowIndex)
        return
    end if
    row = content.GetChild(rowIndex)

    if rowItemIndex < 0 or rowItemIndex >= row.GetChildCount()
        LogWarn("Invalid row item index:", rowItemIndex)
        return
    end if
    rowItem = row.GetChild(rowItemIndex)

    if rowItem.type = "video"
        videoId = rowItem.videoId
        LogInfo("Play video: " + videoId)
        m.playQueue@.Play(rowItem, -1)
    else if rowItem.type = "playlist"
        playlistId = rowItem.playlistId
        LogInfo("Open playlist: " + playlistId)
        OpenPlaylist(rowItem)
    else if rowItem.type = "channel"
        authorId = rowItem.authorId
        LogInfo("Open channel: " + authorId)
        OpenChannel(rowItem)
    else if rowItem.type = "action"
        if rowItem.action = "LoginDialog"
            dialog = CreateObject("roSGNode", "LoginDialog")
            dialog@.BindNode(invalid)
            m.top.getScene().dialog = dialog
        end if
    end if
end function

function OnRowItemLongPressed(index as object) as void
    content = m.top.content
    if content = invalid
        return
    end if

    rowIndex = index[0]
    rowItemIndex = index[1]

    if rowIndex < 0 or rowIndex >= content.GetChildCount()
        LogWarn("Invalid row index:", rowIndex)
        return
    end if
    row = content.GetChild(rowIndex)

    if rowItemIndex < 0 or rowItemIndex >= row.GetChildCount()
        LogWarn("Invalid row item index:", rowItemIndex)
        return
    end if
    rowItem = row.GetChild(rowItemIndex)

    OpenContextMenu(rowItem)
end function

function OpenContextMenu(rowItem as object) as void
    ' TODO:P0
    ' Video menu:
    '   - Play - DONE
    '   - Queue - DONE
    '   - Open channel - DONE
    '   - Add to bookmarks... / Remove from bookmarks
    ' Playlist menu:
    '   - Play - DONE
    '   - Queue - DONE
    '   - Open playlist - DONE
    '   - Open channel
    '   - Add to bookmarks... / Remove from bookmarks
    ' Channel menu:
    '   - Open channel - DONE
    '   - Add to bookmarks... / Remove from bookmarks

    menu = []
    title = ""
    subtitle = ""
    thumbnail = ""

    playAction = {
        text: "Play",
        action: {
            node: m.playQueue,
            func: "Play",
            args: [rowItem, -1]
        }
    }
    queueAction = {
        text: "Queue",
        action: {
            node: m.playQueue,
            func: "AddToQueue",
            args: [rowItem]
        }
    }

    if rowItem.type = "video"
        videoId = rowItem.videoId
        LogInfo("Video long pressed:", videoId)

        title = rowItem.title
        subtitle = rowItem.author
        thumbnail = rowItem.thumbnail

        menu.push(playAction)
        menu.push(queueAction)
        menu.push({
            text: "Open channel",
            action: {
                node: m.top,
                func: "OpenVideoChannel",
                args: [rowItem]
            }
        })
    else if rowItem.type = "playlist"
        playlistId = rowItem.playlistId
        LogInfo("Playlist long pressed:", playlistId)

        title = rowItem.title
        subtitle = rowItem._author
        thumbnail = rowItem.thumbnail

        menu.push(playAction)
        menu.push(queueAction)
        menu.push({
            text: "Open",
            action: {
                node: m.top,
                func: "OpenPlaylist",
                args: [rowItem]
            }
        })
    else if rowItem.type = "channel"
        authorId = rowItem.authorId
        LogInfo("Channel long pressed:", authorId)

        title = rowItem._author
        thumbnail = rowItem.thumbnail

        menu.push({
            text: "Open",
            action: {
                node: m.top,
                func: "OpenChannel",
                args: [rowItem]
            }
        })
    else
        LogWarn("Unknown long pressed item type:", rowItem.type)
        return
    end if

    contextMenu = CreateObject("roSGNode", "ContextMenu")
    m.appController@.PushScreen(contextMenu)
    contextMenu@.BindNode(invalid)
    contextMenu.title = title
    contextMenu.subtitle = subtitle
    contextMenu.thumbnail = thumbnail
    contextMenu.menu = menu
end function

function OpenPlaylist(playlist as object)
    PlaylistUtils.Open(playlist)
end function

function OpenChannel(channel as object)
    ChannelUtils.Open(channel)
end function

function OpenVideoChannel(video as object) as void
    authorId = video.authorId
    if StringUtils.IsNullOrEmpty(authorId)
        LogWarn("Invalid authorId:", authorId)
        return
    end if
    channel = InvidiousContent.ToChannelContentNode(invalid, { authorId: authorId }, invalid)
    ChannelUtils.Open(channel)
end function

function OnAuthTokenChange()
    ' TODO:P2: Reload only content that is authenticated
    ' Should not reload if the page is not visible. Instead, capture state and reload when the page becomes visible
    InitContent()
end function

function InitContent() as void
    CancelCurrentTasks()
    m.top.someContentReady = false

    if m.top.contentData = invalid
        m.top.content = invalid
        return
    end if

    task = StartAsyncTask(VideoRowListContentTask, {
        node: m.top,
        contentData: m.top.contentData
    }, OnVideoRowListContentTaskResult)
    m.pendingLoadTasks[task.id] = task
end function

function CancelCurrentTasks()
    pendingLoadTasks = m.pendingLoadTasks
    for each id in pendingLoadTasks
        task = pendingLoadTasks[id]
        task.cancel = true
    end for
    m.pendingLoadTasks = {}
end function

function OnVideoRowListContentTaskResult(output as object) as void
    m.pendingLoadTasks.Delete(output.task.id)

    if output.cancelled
        return
    end if

    LoadRowsIfNeeded()
end function

function LoadRowsIfNeeded() as void
    if m.top.content = invalid or not m.top.visible
        return
    end if

    itemsToLoad = GetRowsToLoad()
    for each item in itemsToLoad
        LoadRowContent(item)
    end for
end function

function GetRowsToLoad() as object
    focus = m.top.itemFocused
    if focus = -1
        focus = 0
    end if

    contentNode = m.top.content
    rowCount = contentNode.getChildCount()
    if rowCount = 0
        return []
    end if

    subContentNodes = []
    range = m.top.numRows + 1
    for i = -range to range
        index = focus + i
        if index < 0
            continue for
        end if
        if index >= rowCount
            continue for
        end if
        subContentNode = contentNode.getChild(index)
        if subContentNode.loadState <> FeedLoadState.None
            continue for
        end if
        subContentNodes.push(subContentNode)
    end for

    return subContentNodes
end function

function LoadRowContent(contentNode as object)
    LogInfo("Loading row content:", contentNode.title)

    contentNode.loadState = FeedLoadState.Loading
    task = StartAsyncTask(VideoRowListRowContentTask, {
        node: m.top,
        contentNode: contentNode,
        invidious: m.invidious
    }, OnVideoRowListRowContentTaskResult)
    m.pendingLoadTasks[task.id] = task
end function

function OnVideoRowListRowContentTaskResult(output as object) as void
    m.pendingLoadTasks.Delete(output.task.id)
    if output.cancelled
        return
    end if

    if not output.success or not output.result.success
        ' output.error for unhandled exception
        error = output.error
        if error = invalid
            ' output.result.error for network errors
            error = output.result.error
        end if
        error = ErrorUtils.Format(error)
        LogError(error)
        m.top.onError = error
        message = `Failed to load feed\n${error}`
        DialogUtils.ShowDialog(message, "Feed load fail", true)
    end if

    LoadRowsIfNeeded()
end function

function OnkeyEvent(key as string, press as boolean) as boolean
    ' LogInfo("OnkeyEvent", key, press)
    if LongPressHandler(key, press)
        return true
    end if

    if key = "longPress" and press
        OnRowItemLongPressed(m.top.rowItemFocused)
        return true
    end if

    if key = "OK" and not press
        OnRowItemSelected(m.top.rowItemFocused)
        return true
    end if
    return false
end function
