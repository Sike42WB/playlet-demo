import "pkg:/source/utils/TimeUtils.bs"
import "pkg:/source/utils/Types.bs"

function Init()
    m.titleLabel = m.top.FindNode("titleLabel")
    m.authorLabel = m.top.FindNode("authorLabel")
    m.viewCountDateLabel = m.top.FindNode("viewCountDateLabel")
    m.liveRect = m.top.FindNode("liveRect")
    m.upcomingRect = m.top.FindNode("upcomingRect")
    m.durationRect = m.top.FindNode("durationRect")
    m.durationLabel = m.top.FindNode("durationLabel")
    m.thumbnail = m.top.FindNode("thumbnail")
    m.thumbnail.failedBitmapUri = "pkg:/images/thumbnail-missing.jpg"
end function

function OnContentSet() as void
    content = m.top.itemContent

    if content = invalid
        return
    end if

    m.titleLabel.text = content.title
    m.authorLabel.text = content.author

    if content.isUpcoming = true
        m.viewCountDateLabel.text = content.premiereTimestampText
    else
        publishedText = ValidString(content.publishedText)
        viewCountText = ValidString(content.viewCountText)
        if publishedText = "" and viewCountText = ""
            m.viewCountDateLabel.text = ""
        else
            m.viewCountDateLabel.text = `${publishedText} â€¢ ${viewCountText}`
        end if
    end if

    m.thumbnail.uri = content.thumbnail

    if content.isUpcoming = true
        m.upcomingRect.visible = true
        m.liveRect.visible = false
        m.durationRect.visible = false
    else if content.liveNow
        m.upcomingRect.visible = false
        m.liveRect.visible = true
        m.durationRect.visible = false
    else
        m.upcomingRect.visible = false
        m.liveRect.visible = false
        if ValidInt(content.lengthSeconds) <> 0
            SetDurationText(content.lengthText)
            m.durationRect.visible = true
        else
            m.durationRect.visible = false
        end if
    end if
end function

function SetDurationText(text as string)
    label = m.durationLabel
    rect = m.durationRect

    rectParent = rect.getParent()

    label.text = text
    size = label.localBoundingRect()

    rect.width = size.width + 16
    rect.translation = [rectParent.width - rect.width, 162]
end function

