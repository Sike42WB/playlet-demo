import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/TimeUtils.bs"
import "pkg:/source/utils/Types.bs"

function Init()
    FindChildren()
end function

function FindChildren()
    ' TODO:P2 use component properties with alias instead of FindNode
    m.titleLabel = m.top.FindNode("titleLabel")
    m.authorLabel = m.top.FindNode("authorLabel")
    m.viewCountDateLabel = m.top.FindNode("viewCountDateLabel")
    m.liveRect = m.top.FindNode("liveRect")
    m.upcomingRect = m.top.FindNode("upcomingRect")
    m.durationRect = m.top.FindNode("durationRect")
    m.durationLabel = m.top.FindNode("durationLabel")
    m.thumbnail = m.top.FindNode("thumbnail")
    m.progressRect = m.top.FindNode("progressRect")
end function

function OnContentSet() as void
    content = m.top.itemContent

    if content = invalid
        if m.progressNode <> invalid
            m.progressNode.unobserveFieldScoped("timestamp")
            m.progressNode = invalid
        end if
        return
    end if

    if m.titleLabel = invalid
        FindChildren()
    end if

    m.titleLabel.text = content.title
    m.authorLabel.text = content.author

    if content.isUpcoming = true
        m.viewCountDateLabel.text = content.premiereTimestampText
    else if not StringUtils.IsNullOrEmpty(content.publishedText)
        label = content.publishedText
        if not StringUtils.IsNullOrEmpty(content.viewCountText)
            label = `${label} â€¢ ${content.viewCountText}`
        end if
        m.viewCountDateLabel.text = label
    else
        m.viewCountDateLabel.text = ""
    end if

    m.thumbnail.uri = content.thumbnail

    m.durationRect.visible = false
    m.upcomingRect.visible = false
    m.liveRect.visible = false

    if ValidInt(content.lengthSeconds) <> 0
        SetDurationText(content.lengthText)
        m.durationRect.visible = true
    else
        if content.isUpcoming = true
            m.upcomingRect.visible = true
        else if content.liveNow
            m.liveRect.visible = true
        end if
    end if

    SetupProgress(content)
end function

function SetDurationText(text as string)
    label = m.durationLabel
    rect = m.durationRect

    rectParent = rect.getParent()

    label.text = text
    size = label.localBoundingRect()

    rect.width = size.width + 16
    rect.translation = [rectParent.width - rect.width, rect.translation[1]]
end function

function SetupProgress(content as object)
    if m.progressNode <> invalid
        m.progressNode.unobserveFieldScoped("timestamp")
        m.progressNode = invalid
    end if

    m.progressNode = content.progressNode
    if m.progressNode <> invalid
        m.progressNode.observeFieldScoped("timestamp", FuncName(SetProgress))
    end if
    SetProgress()
end function

function SetProgress() as void
    if m.progressNode = invalid
        m.progressRect.scale = [0, 1]
        return
    end if

    duration = m.progressNode.duration
    timestamp = m.progressNode.timestamp
    progress = 0
    if duration > 0
        progress = timestamp / duration
    end if
    m.progressRect.scale = [progress, 1]
end function
