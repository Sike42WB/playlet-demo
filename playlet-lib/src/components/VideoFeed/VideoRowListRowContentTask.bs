import "pkg:/components/Dialog/DialogUtils.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"

@asynctask
function VideoRowListRowContentTask(input as object) as object
    try
        rowList = input.rowList
        feedContentNode = input.feedContentNode
        invidiousNode = input.invidious

        service = new Invidious.InvidiousService(invidiousNode)
        instance = service.GetInstance()

        totalfetchedItems = 0

        while true
            if m.top.cancel
                feedContentNode.loadState = FeedLoadState.None
                return invalid
            end if

            feedSources = feedContentNode.feedSources
            feedSourcesIndex = feedContentNode.feedSourcesIndex

            if feedSourcesIndex >= feedSources.Count()
                feedContentNode.loadState = FeedLoadState.Loaded
                return {
                    success: true
                }
            end if

            feedSource = feedSources[feedSourcesIndex]

            if feedSource.state.loadState = FeedLoadState.Loaded or feedSource.state.loadState = FeedLoadState.Error
                feedSourcesIndex += 1
                if feedSourcesIndex >= feedSources.Count()
                    feedContentNode.loadState = FeedLoadState.Loaded
                    return {
                        success: true
                    }
                end if
                feedContentNode.feedSourcesIndex = feedSourcesIndex
                continue while
            end if

            feedSource = service.MarkFeedPagination(feedContentNode)

            response = service.MakeRequest(feedSource, feedSource.state.queryParams, m.top.cancellation)

            if not response.success
                if response.error = Invidious.ERROR_NOT_AUTHENTICATED
                    RemovePlaceHolderItems(feedContentNode)
                    actionNode = CreateObject("roSGNode", "ActionContentNode")
                    actionNode.title = `Login to view ${feedSource.title}`
                    actionNode.action = "LoginDialog"

                    feedSource.state.loadState = FeedLoadState.Loaded
                    feedSources[feedSourcesIndex] = feedSource
                    feedContentNode.feedSources = feedSources

                    feedContentNode.appendChild(actionNode)
                    feedContentNode.loadState = FeedLoadState.Loaded

                    continue while
                end if

                ' Invidious returns 500 and "{"error":"Closed stream"}" when the Popular feed is disabled
                if feedSource.endpoint = "popular" and response.error.instr("Closed stream") > -1
                    LogWarn("Popular feedSource not available:", response.error)
                    if feedSources.Count() = 1
                        parent = feedContentNode.getParent()
                        parent.removeChild(feedContentNode)
                        return {
                            success: true
                        }
                    end if

                    continue while
                end if

                feedSource.state.loadState = FeedLoadState.Error
                feedSources[feedSourcesIndex] = feedSource
                feedContentNode.feedSources = feedSources

                if feedContentNode.title.instr(" (Failed to load)") = -1
                    feedContentNode.title += " (Failed to load)"
                end if

                HandleFeedLoadErrorDialog(response.error, rowList)
                continue while
            end if

            itemNodes = []
            for each item in response.result.items
                itemNode = InvidiousContent.ToRowCellContentNode(item, instance)
                if itemNode <> invalid
                    itemNode.feedSourcesIndex = feedSourcesIndex
                    itemNodes.Push(itemNode)
                end if
            end for

            RemovePlaceHolderItems(feedContentNode)
            feedContentNode.appendChildren(itemNodes)

            hasContinuation = not StringUtils.IsNullOrEmpty(response.result.continuation)
            if hasContinuation
                feedSource.state.continuation = response.result.continuation
            end if

            if response.result.items.Count() > 0
                pageType = feedSource.state.paginationType
                if pageType = PaginationType.Continuation and hasContinuation
                    feedSource.state.loadState = FeedLoadState.LoadedPage
                else if pageType = PaginationType.Pages
                    feedSource.state.loadState = FeedLoadState.LoadedPage
                else
                    feedSource.state.loadState = FeedLoadState.Loaded
                end if
            else
                feedSource.state.loadState = FeedLoadState.Loaded
            end if

            feedSources[feedSourcesIndex] = feedSource
            feedContentNode.feedSources = feedSources

            if feedSource.state.loadState = FeedLoadState.Loaded and feedSourcesIndex = feedSources.Count() - 1
                feedContentNode.loadState = FeedLoadState.Loaded
            else
                feedContentNode.loadState = FeedLoadState.LoadedPage
            end if

            if itemNodes.Count() > 0
                rowList.someContentReady = true
            end if

            totalfetchedItems += response.result.items.Count()
            if totalfetchedItems > 3
                exit while
            end if
        end while

    catch error
        HandleFeedLoadErrorDialog(error, rowList)
        return {
            success: false,
            error: error
        }
    end try

    return {
        success: true
    }
end function

function RemovePlaceHolderItems(contentNode as object)
    isLoading = true
    while isLoading and contentNode.getChildCount() > 0
        lastIndex = contentNode.getChildCount() - 1
        child = contentNode.getChild(lastIndex)
        isLoading = IsString(child.type) and child.type = "loading"
        if isLoading = true
            contentNode.removeChildIndex(lastIndex)
        end if
    end while
end function

function HandleFeedLoadErrorDialog(error as object, rowList as object)
    error = ErrorUtils.Format(error)
    LogError(error)
    rowList.onError = error
    DialogUtils.ShowDialog(error, "Failed to load feed", true)
end function
