import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"

@asynctask
function VideoRowListRowContentTask(input as object) as object
    rowList = input.node
    contentNode = input.contentNode
    invidiousNode = input.invidious

    if m.top.cancel
        return invalid
    end if

    service = new Invidious.InvidiousService(invidiousNode)

    contentNode.feed = service.MarkPagination(contentNode.feed)
    response = service.MakeRequest(contentNode.feed, m.top.cancellation)

    if m.top.cancel
        return invalid
    end if

    ' TODO:P0 handle unauthenticated requests
    if not response.success
        contentNode.loadState = FeedLoadState.Error
        contentNode.title += " (Failed to load)"
        return response
    end if

    instance = service.GetInstance()
    itemNodes = []
    for each item in response.result
        itemNode = InvidiousToRowCellContentNode(item, instance)
        if itemNode <> invalid
            itemNodes.Push(itemNode)
        end if
    end for

    RemovePlaceHolderItems(contentNode)
    contentNode.appendChildren(itemNodes)

    if contentNode.feed.pagination = true and response.result.Count() > 0
        contentNode.loadState = FeedLoadState.LoadedPage
    else
        contentNode.loadState = FeedLoadState.Loaded
    end if

    if itemNodes.Count() > 0
        rowList.someContentReady = true
    end if

    return response
end function

function RemovePlaceHolderItems(contentNode as object)
    isPlaceHolder = true
    while isPlaceHolder and contentNode.getChildCount() > 0
        lastIndex = contentNode.getChildCount() - 1
        isPlaceHolder = contentNode.getChild(lastIndex).isPlaceHolder = true
        if isPlaceHolder = true
            contentNode.removeChildIndex(lastIndex)
        end if
    end while
end function
