import "pkg:/source/utils/FocusManagement.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/Types.bs"

' TODO:P0 Context menu
' TODO:P0 Web app support
' TODO:P0 Web apis and open api spec updates
'
' From the main screen:
'    When a video is selected:
'      - "Play" - DONE
'      - "Queue" - DONE
'      - "Open Channel" - DONE
'      - "Add to "Videos" bookmark" - DONE
'      - If video is already in a bookmark, "Remove from Bookmarks" - DONE
'
'    When a channel is selected:
'      - "Open" - DONE
'      - "Add to "Channels" bookmark" - DONE
'      - "Add to <ChannelName> bookmark" - DONE
'      - If channel is already in a bookmark, "Remove from Bookmarks" - DONE
'      - PlaylistId starting with "IV" cannot be added to a bookmark - DONE
'
'    When a playlist is selected:
'      - "Play" - DONE
'      - "Queue" - DONE
'      - "Open" - DONE
'      - "Add to "Playlists" bookmark" - DONE
'      - "Add to <PlaylistName> bookmark" - DONE
'      - If playlist is already in a bookmark, "Remove from Bookmarks" - DONE
'    When any:
'      - "Reload feed"
'
' From Playlist view:
'    When a video is selected:
'      - "Play"
'      - "Queue"
'      - "Play video"
'      - "Queue video"
'      - "Open Channel"
'      - "Add to "Playlists" bookmark"
'      - "Add to <PlaylistName> bookmark"
'      - "Add to "Videos" bookmark"
'
' From Channel view:
'    When a video is selected:
'      - "Play"
'      - "Queue"
'      - "Add to "Channels" bookmark"
'      - "Add to <ChannelName> - <feed> bookmark" feed being latest videos, live, shorts, etc
'      - "Add to "Videos" bookmark"
'
'    When a playlist is selected:
'      - "Play"
'      - "Queue"
'      - "Open"
'      - "Add to "Channels" bookmark"
'      - "Add to <ChannelName> - <feed> bookmark" feed being latest videos, live, shorts, etc
'      - "Add to "Playlists" bookmark"
'      - "Add to <PlaylistName> bookmark"
'
' From search view:
'    When a video/channel/playlist is selected:
'      - Inherit options
'      - "Add to "Search - ${q}" bookmark" - this includes the search filters used
'
' From bookmarks view:
'    When a video/channel/playlist is selected:
'      - Inherit options
'      - "Remove item from Bookmarks"
'      - "Remove group from Bookmarks"
'      - "Reload bookmarks"
'
' TODO:P1 Playlist item seletected from the bookmarks need to play as a playlist, not as a single video
' TODO:P1 Context menu might need to be scrollable (both horizontally and vertically)
' TODO:P1 Context menu might need sections. Example:
' In a Channel view, while selecting a playlist:
'    - Channel
'      - Add to "Channels" bookmark
'      - Other "Channels" related context menu items
'    - Playlist
'      - Add to "Playlists" bookmark
'      - "Play/Queue"
'      - Other "Playlists" related context menu items

function Init()
    m.buttonGroup = m.top.findNode("buttonGroup")
    m.showAnimation = m.top.findNode("showAnimation")
end function

function OnNodeReady()
    m.buttonGroup.ObserveField("buttonSelected", FuncName(OnButtonSelected))
    m.showAnimation.control = "start"
end function

function OnFocusChange() as void
    if not m.top.focus
        return
    end if
    NodeSetFocus(m.buttonGroup, true)
end function

function OnMenuSet() as void
    menu = m.top.menu
    if menu = invalid
        return
    end if

    buttons = []
    for each item in menu
        buttons.push(item.title)
    end for

    m.buttonGroup.buttons = buttons
end function

function OnButtonSelected(event as object) as void
    index = event.getData()
    button = m.buttonGroup.buttons[index]
    Close()
    LogInfo("Menu button selected:", button)

    menu = m.top.menu
    if index >= menu.count()
        LogError("Menu button index out of range:", index)
        return
    end if

    menuItem = menu[index]

    node = menuItem.node
    func = menuItem.func
    args = menuItem.args

    if node = invalid or StringUtils.IsNullOrEmpty(func) or args = invalid
        LogError("Menu button action is invalid")
        return
    end if

    if args.count() = 1
        node.callFunc(func, args[0])
    else if args.count() = 2
        node.callFunc(func, args[0], args[1])
    else if args.count() = 3
        node.callFunc(func, args[0], args[1], args[2])
    else if args.count() = 4
        node.callFunc(func, args[0], args[1], args[2], args[3])
    else if args.count() = 5
        node.callFunc(func, args[0], args[1], args[2], args[3], args[4])
    else
        LogError("Menu button action has too many arguments")
    end if
end function

function OnkeyEvent(key as string, press as boolean) as boolean
    if press = false
        return false
    end if

    if key = "back"
        Close()
        return true
    end if
    return false
end function

function Close()
    m.appController@.PopScreen(invalid)
end function
