import "pkg:/source/utils/ColorUtils.bs"
import "pkg:/source/utils/NodeSetFocus.bs"
import "pkg:/components/Navigation/Navigation.bs"
import "pkg:/source/asyncTask/asyncTask.bs"
import "pkg:/components/Screens/HomeScreen/HomeScreenContentTask.bs"
import "pkg:/components/Screens/HomeScreen/HomeScreenRowContentTask.bs"
import "pkg:/components/VideoPlayer/VideoUtils.bs"
import "pkg:/source/roku_modules/log/LogMixin.brs"

function Init()
    m.rowList = m.top.FindNode("rowList")
    m.pendingLoadTasks = {}
end function

function OnNodeReady()
    m.log = new log.Logger("HomeScreen")

    m.top.ObserveField("visible", "OnVisibilityChange")
    m.rowList.ObserveField("itemFocused", "OnItemFocused")
    m.rowList.ObserveField("rowItemSelected", "OnRowItemSelected")

    SetNavigation(invalid, "back", m.navBar)
    SetNavigation(invalid, "left", m.navBar)

    m.invidious.ObserveField("authToken", "OnAuthTokenChange")
    InitContent()
end function

function OnAuthTokenChange()
    InitContent()
end function

function OnFocusChange()
    if m.top.focus = true
        LoadItemsIfNeeded()
        NodeSetFocus(m.rowList, true)
    end if
end function

function OnVisibilityChange()
    if m.top.visible = true
        LoadItemsIfNeeded(true)
    end if
end function

function OnkeyEvent(key as string, press as boolean) as boolean
    if NavigationKeyHandler(key, press).handled
        return true
    end if
    return false
end function

function InitContent()
    CancelCurrentTasks()

    m.contentTask = StartAsyncTask(HomeScreenContentTask, {
        node: m.rowList,
        contentFilePath: "libpkg:/config/default_home_layout.json5"
    }, HomeScreenContentTaskResults)
end function

function CancelCurrentTasks()
    if m.contentTask <> invalid
        m.contentTask.control = "stop"
    end if

    pendingLoadTasks = m.pendingLoadTasks
    for each id in pendingLoadTasks
        task = pendingLoadTasks[id]
        task.control = "stop"
    end for

    m.pendingLoadTasks = {}
end function

function HomeScreenContentTaskResults(output as object)
    LoadItemsIfNeeded()
end function

function OnItemFocused()
    LoadItemsIfNeeded()
end function

function LoadItemsIfNeeded(visibleOnly = false as boolean) as void
    if m.rowList.content = invalid
        return
    end if

    itemsToLoad = GetItemsToLoad(visibleOnly)
    for each item in itemsToLoad
        LoadItemContent(item)
    end for
end function

function GetItemsToLoad(visibleOnly = false as boolean) as object
    focus = m.rowList.itemFocused
    if focus = -1
        focus = 0
    end if

    contentNode = m.rowList.content
    rowCount = contentNode.getChildCount()
    if rowCount = 0
        return []
    end if

    subContentNodes = []
    range = m.rowList.numRows
    for i = -range to range
        index = focus + i
        if index < 0
            continue for
        end if
        if index >= rowCount
            continue for
        end if
        subContentNode = contentNode.getChild(index)
        if subContentNode.loadState <> "notLoaded"
            continue for
        end if
        subContentNodes.push(subContentNode)
    end for

    if not visibleOnly
        if subContentNodes.count() = 0 and m.top.visible
            for i = 0 to rowCount - 1
                subContentNode = contentNode.getChild(i)
                if subContentNode.loadState <> "notLoaded"
                    continue for
                end if
                subContentNodes.push(subContentNode)
                if subContentNodes.count() >= 5
                    exit for
                end if
            end for
        end if
    end if

    return subContentNodes
end function

function LoadItemContent(contentNode as object)
    contentNode.loadState = "loading"
    task = StartAsyncTask(HomeScreenRowContentTask, {
        node: contentNode,
        invidious: m.invidious
    }, HomeScreenRowContentTaskResults)
    m.pendingLoadTasks[task.id] = task
end function

function HomeScreenRowContentTaskResults(output as object)
    m.pendingLoadTasks.Delete(output.task.id)
    LoadItemsIfNeeded()
end function

function OnRowItemSelected(event as object)
    grid = event.GetRoSGNode()

    selectedPair = event.GetData()
    selectedRow = selectedPair[0]
    selectedRowItem = selectedPair[1]

    rowContent = grid.content.GetChild(selectedRow)
    itemContent = rowContent.GetChild(selectedRowItem)

    if itemContent.type = "video"
        videoId = itemContent.videoId
        m.log.info("Play video: " + videoId)
        VideoUtils.PlayVideo({ content: itemContent })
    else if itemContent.type = "playlist"
        playlistId = itemContent.playlistId
        m.log.info("Open playlist: " + playlistId)
    else if itemContent.type = "channel"
        authorId = itemContent.authorId
        m.log.info("Open channel: " + authorId)
    end if
end function
