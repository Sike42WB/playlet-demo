import "pkg:/source/utils/FocusManagement.bs"
import "pkg:/components/Navigation/Navigation.bs"
import "pkg:/source/utils/Types.bs"
import "pkg:/source/utils/Logging.bs"

function Init()
    m.top.focusable = true

    m.buttons = []
    for i = 1 to 9
        button = m.top.findNode(`button${i}`)
        button.translation = [640, i * 70]
        button.observeField("buttonSelected", FuncName(OnButtonSelected))
        m.buttons.Push(button)
    end for
end function

function OnNodeReady()
    SetNavigation(invalid, "back", m.navBar)
    SetNavigation(invalid, "left", m.navBar)
end function

function OnFocusChange() as void
    if not m.top.focus
        return
    end if
    NodeSetFocus(m.buttons[0], true)
    m.currentButton = m.buttons[0]
end function

function OnkeyEvent(key as string, press as boolean) as boolean
    navigation = NavigationKeyHandler(key, press)
    if navigation.handled
        return true
    end if

    if not press
        return false
    end if

    currentIndex = -1
    for i = 0 to m.buttons.Count() - 1
        if m.buttons[i].hasFocus()
            currentIndex = i
            exit for
        end if
    end for

    if currentIndex = -1
        return false
    end if

    if key = "up"
        for i = currentIndex - 1 to 0 step -1
            if m.buttons[i].focusable
                NodeSetFocus(m.buttons[i], true)
                return true
            end if
        end for
    end if

    if key = "down"
        for i = currentIndex + 1 to m.buttons.Count() - 1
            if m.buttons[i].focusable
                NodeSetFocus(m.buttons[i], true)
                return true
            end if
        end for
    end if

    return false
end function

function OnButtonSelected(event as object)
    node = event.getRoSGNode()
    LogInfo("Button selected - ", node.id)
end function
