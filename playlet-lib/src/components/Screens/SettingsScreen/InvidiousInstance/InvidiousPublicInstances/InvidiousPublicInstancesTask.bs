import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/source/services/HttpClient.bs"
import "pkg:/source/utils/Logging.bs"

@asynctask
function InvidiousPublicInstancesTask(input as object) as object
    listNode = input.listNode

    if m.top.cancel
        return invalid
    end if

    response = HttpClient.Get(Invidious.INSTANCES_API).Await()
    instances = response.Json()

    if not response.IsSuccess() or instances = invalid
        return {
            success: false
            error: response.ErrorMessage()
        }
    end if

    if m.top.cancel
        return invalid
    end if

    instances = FilterInstances(instances)

    content = CreateObject("roSGNode", "ContentNode")

    for each instance in instances
        item = CreateListItemContent(instance)
        if item = invalid
            continue for
        end if
        content.AppendChild(item)
    end for

    listNode.content = content

    return {
        success: true
    }
end function

function FilterInstances(instances as object) as object
    filtered = []

    for each instance in instances
        if not IsArray(instance) or instance.Count() < 2
            LogWarn("Invalid instance:", instance)
            continue for
        end if

        flags = instance[1]
        if flags.type = "https" and flags.api = true and flags.cors = true
            filtered.Push(instance)
        end if
    end for

    return filtered
end function

function CreateListItemContent(instance as object) as object
    if not IsArray(instance) or instance.Count() < 2
        LogWarn("Invalid instance:", instance)
        return invalid
    end if

    item = CreateObject("roSGNode", "InvidiousPublicInstancesListItemContent")
    item.setFields({
        name: instance[0]
        version: DrillIntoObject(instance[1], ["stats", "software", "version"], "N/A")
        users: DrillIntoObject(instance[1], ["stats", "usage", "users", "total"], "N/A")
        signup: DrillIntoObject(instance[1], ["stats", "openRegistrations"], false) ? "Yes" : "No"
        ' Leave 5 spaces for the flag, just to simplify the layout
        location: `     ${DrillIntoObject(instance[1], ["region"], "N/A")}`
        flag: GetFlagUrl(DrillIntoObject(instance[1], ["flag"], ""))
        health: DrillIntoObject(instance[1], ["monitor", "30dRatio", "ratio"], "N/A")
        uri: instance[1].uri
    })

    return item
end function

function DrillIntoObject(obj as object, path as object, defaultValue as dynamic) as dynamic
    if obj = invalid
        return defaultValue
    end if

    for each key in path
        if obj[key] = invalid
            return defaultValue
        end if
        obj = obj[key]
    end for

    return obj
end function

function GetFlagUrl(flag as string) as string
    if flag = ""
        return ""
    end if
    codePoint = EmojiToCodePoint(flag)
    return `https://github.githubassets.com/images/icons/emoji/unicode/${codePoint}.png?v8`
end function

function EmojiToCodePoint(emoji as string) as string
    codes = []
    chars = emoji.Split("")
    for i = 0 to chars.count() - 1
        c = Asc(chars[i])
        codes.push(StrI(c, 16))
    end for
    return codes.join("-")
end function
