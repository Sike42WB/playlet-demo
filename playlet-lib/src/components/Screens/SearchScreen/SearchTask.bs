import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"

@asynctask
function SearchTask(input as object) as object
    q = input.q
    invidiousNode = input.invidious

    contentNode = CreateObject("roSGNode", "ContentNode")

    service = new Invidious.InvidiousService(invidiousNode)

    response = service.Search(q, { type: "video" }, m.top.cancellation) 'video,playlist,channel

    instance = service.GetInstance()
    rowContent = GetCategoryContent(contentNode, `Search - ${q}`, response, instance)
    if rowContent <> invalid
        contentNode.appendChild(rowContent)
    end if

    return {
        q: q,
        content: contentNode
    }
end function

function GetCategoryContent(contentNode as object, category as string, json as object, instance as string) as object
    if json <> invalid and json.Count() > 0
        row = contentNode.CreateChild("ContentNode")
        row.title = category
        for each item in json
            itemData = InvidiousToRowCellContentNode(item, instance)
            if itemData <> invalid
                row.appendChild(itemData)
            end if
        end for
        return row
    end if
    return invalid
end function
