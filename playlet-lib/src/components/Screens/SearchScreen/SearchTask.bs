import "pkg:/components/Services/Invidious/InvidiousService.bs"

@asynctask
function SearchTask(input as object) as object
    q = input.q
    invidiousNode = input.invidious

    contentNode = CreateObject("roSGNode", "ContentNode")

    service = new Invidious.InvidiousService(invidiousNode)

    response = service.Search(q, { type: "video" }) 'video,playlist,channel

    rowContent = GetCategoryContent(contentNode, `Search - ${q}`, response)
    if rowContent <> invalid
        contentNode.appendChild(rowContent)
    end if

    return {
        q: q,
        content: contentNode
    }
end function

function GetCategoryContent(contentNode as object, category as string, json as object) as object
    if json <> invalid and json.Count() > 0
        row = contentNode.CreateChild("ContentNode")
        row.title = category
        for each item in json
            itemData = GetItemData(item)
            if itemData <> invalid
                row.appendChild(itemData)
            end if
        end for
        return row
    end if
    return invalid
end function

function GetItemData(video as object) as object
    if video.type <> "video" and video.type <> "playlist" and video.type <> "channel"
        return invalid
    end if

    videoItem = CreateObject("roSGNode", "ContentNode")
    videoItem.addField("HDItemWidth", "float", false)
    videoItem.append(video)

    if video.type = "channel"
        videoItem.HDItemWidth = "200"
    else
        videoItem.HDItemWidth = "350"
    end if
    return videoItem
end function
