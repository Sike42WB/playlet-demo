' NodeByRef: these functions provides the ability to "wrap" a node in
' another node, so it can be passed by reference.  This is useful for
' when a node is required to be a child of multiple nodes at once,
' which is not possible.
' Instead, the node is wrapped, passed around, and unwrapped when needed.
import "pkg:/source/utils/StringUtils.bs"

namespace NodeByRef

    function Wrap(node as object) as object
        if node = invalid
            return invalid
        end if

        if node.refNode <> invalid
            return node
        end if

        ref = CreateObject("roSGNode", "ContentNodeReference")
        ref.refNode = node
        if not StringUtils.IsNullOrEmpty(node.id)
            ref.id = node.id + "-ref"
        end if
        return ref
    end function

    function Unwrap(node as object) as object
        if node = invalid
            return invalid
        end if

        loopGuard = 0
        while node.refNode <> invalid and loopGuard < 10
            node = node.refNode
            loopGuard += 1
        end while

        return node
    end function

end namespace
