import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/Types.bs"

function Init()
    m.top.functionName = "LoggerLoop"

    port = CreateObject("roMessagePort")

    m.top.ObserveField("logLine", port)

    scene = m.top.getScene()
    if scene.hasField("systemLogEvent")
        scene.ObserveFieldScoped("systemLogEvent", port)
    end if

    m.port = port

    StartLogger(m.top)
end function

function StartLogger(logger as object, logLevel = LogLevel.Info as LogLevel) as void
    if m.global.logger <> invalid
        return
    end if

    logger.logLevel = logLevel
    m.global.addFields({ logger: logger })
    logger.control = "run"
end function

function LoggerLoop()
    port = m.port

    buffer = CreateObject("roByteArray")
    previousLogsFile = m.top.folder + "/" + m.top.filenamePrevious
    logsFile = m.top.folder + "/" + m.top.filename

    CreateDirectory(m.top.folder)
    DeleteFile(previousLogsFile)
    MoveFile(logsFile, previousLogsFile)

    while true
        msg = wait(0, port)
        msgType = type(msg)
        if msgType = "roSGNodeEvent"
            field = msg.getField()
            if field = "logLine"
                OnLineLog(msg, logsFile, buffer)
            else if field = "systemLogEvent"
                OnLineSysLog(msg, logsFile, buffer)
            end if
        end if
    end while
end function

function OnLineLog(event as object, logsFile as string, buffer as object)
    line = event.getData()
    ' bs:disable-next-line LINT3012
    print line

    buffer.FromAsciiString(line + `\n`)
    buffer.AppendFile(logsFile)
end function

function OnLineSysLog(event as object, logsFile as string, buffer as object) as void
    info = event.getData()
    if info.LogType <> "http.error"
        return
    end if
    ' TODO:P0 info might not be serilizable to json
    line = `[ERROR][SysLog] ${FormatJson(info)}`
    ' bs:disable-next-line LINT3012
    print line

    buffer.FromAsciiString(line + `\n`)
    buffer.AppendFile(logsFile)
end function
