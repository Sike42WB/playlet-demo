import "pkg:/source/utils/ColorUtils.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/Types.bs"

function init()
    m.richLabelImage = m.top.findNode("RichLabelImage")
    m.richLabelImage.observeField("loadStatus", "OnRichLabelImageLoadStatus")
end function

function OnRichTextSet()
    richText = m.top.richText
    m.top.text = richText

    args = {
        "text": richText,
        "color": ColorUtils.IntToHex(m.top.color),
        "width": m.top.width,
        "height": m.top.height,
        "font": m.top.richFont,
        "maxLines": m.top.maxLines,
        "lineSpacing": m.top.lineSpacing
    }
    uri = GetTextToImageUrl(args)
    ?uri
    m.richLabelImage.uri = uri
end function

function GetTextToImageUrl(args as object) as string
    url = "http://192.168.1.182:8081/v1/render?"
    for each arg in args
        value = args[arg]
        if isstr(value)
            value = value.EncodeUriComponent()
        end if
        url += `${arg}=${value}&`
    end for
    ' TODO: remove this. Adding a random value to disable caching
    ' url += `_=${Rnd(1000000)}`
    return url
end function

function OnRichLabelImageLoadStatus() as void
    if not m.richLabelImage.loadStatus = "ready"
        return
    end if

    m.richLabelImage.width = m.top.width
    m.richLabelImage.height = m.richLabelImage.width * (m.richLabelImage.bitmapHeight / m.richLabelImage.bitmapWidth)

    m.top.text = ""
end function
