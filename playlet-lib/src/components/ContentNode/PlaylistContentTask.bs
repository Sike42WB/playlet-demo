import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"
import "pkg:/components/VideoFeed/FeedLoadState.bs"

@asynctask
function PlaylistContentTask(input as object) as object
    contentNode = input.content
    invidiousNode = input.invidious
    singlePage = input.singlePage

    if m.top.cancel
        contentNode.loadState = FeedLoadState.None
        return invalid
    end if

    service = new Invidious.InvidiousService(invidiousNode)
    instance = service.GetInstance()

    while true
        index = contentNode.getChildCount()
        continuation = contentNode.continuation
        hadContinuation = not StringUtils.IsNullOrEmpty(continuation)

        response = service.GetPlaylist(contentNode.playlistId, index, continuation, m.top.cancellation)

        if m.top.cancel
            contentNode.loadState = FeedLoadState.None
            return invalid
        end if

        metadata = response.Json()

        if not response.IsSuccess() or metadata = invalid
            contentNode.loadState = FeedLoadState.Error
            return {
                success: false
                error: response.ErrorMessage()
            }
        end if

        if metadata.DoesExist("error")
            contentNode.loadState = FeedLoadState.Error
            return {
                success: false
                error: metadata.error
            }
        end if

        ' TODO:P2 To remove after https://github.com/iv-org/invidious/pull/5116
        if IsString(metadata["mixId"]) and IsArray(metadata["videos"])
            videos = metadata["videos"]
            for i = 0 to videos.Count() - 1
                thumbnails = videos[i].videoThumbnails
                if thumbnails.Count() = 1 and IsArray(thumbnails[0])
                    videos[i].videoThumbnails = thumbnails[0]
                end if
            end for
        end if

        InvidiousContent.ToPlaylistContentNode(contentNode, metadata, instance)
        childCount = contentNode.getChildCount()

        videoCount = ValidInt(metadata.videoCount)

        hasContinuation = not StringUtils.IsNullOrEmpty(metadata.continuation)
        if (hadContinuation and not hasContinuation) or (metadata.videos.Count() = 0 or childCount >= videoCount)
            contentNode.loadState = FeedLoadState.Loaded
            return {
                success: true
            }
        else
            contentNode.loadState = FeedLoadState.LoadedPage
            if singlePage
                return {
                    success: true
                }
            end if
        end if
    end while

    return invalid
end function
