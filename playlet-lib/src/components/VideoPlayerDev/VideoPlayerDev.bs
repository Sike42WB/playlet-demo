import "pkg:/components/Navigation/Navigation.bs"
import "pkg:/components/VideoPlayerDev/PictureInPicture.bs"
import "pkg:/components/VideoQueue/VideoQueueUtils.bs"
import "pkg:/source/AsyncTask/AsyncTask.bs"
import "pkg:/source/AsyncTask/Tasks.bs"
import "pkg:/source/utils/DisposableObserve.bs"
import "pkg:/source/utils/ErrorUtils.bs"
import "pkg:/source/utils/FocusManagement.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/RemoteKeys.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/Types.bs"

function Init()
    m.top.enableUI = false
    m.top.enableTrickPlay = false

    httpAgent = m.top.getHttpAgent()
    httpAgent.AddHeader("User-Agent", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:123.0) Gecko/20100101 Firefox/123.0")

    m.clock = m.top.findNode("Clock")
    m.titleLabel = m.top.findNode("TitleLabel")
    m.secondaryTitleLabel = m.top.findNode("SecondaryTitleLabel")
    m.backgroundPoster = m.top.findNode("BackgroundPoster")
    m.backgroundPosterSmall = m.top.findNode("BackgroundPosterSmall")
    m.previousButton = m.top.findNode("PreviousButton")
    m.playButton = m.top.findNode("PlayButton")
    m.nextButton = m.top.findNode("NextButton")
    m.minimizeButton = m.top.findNode("MinimizeButton")
    m.trickPlayBar = m.top.findNode("TrickPlayBar")
    m.videoUi = m.top.findNode("VideoUI")
    m.progressTimer = m.top.findNode("ProgressTimer")
    m.hideVideoUiTimer = m.top.findNode("HideVideoUiTimer")
    m.fadeAnimation = m.top.findNode("FadeAnimation")
    m.fadeOpacityInterpolator = m.top.findNode("FadeOpacityInterpolator")

    SetupLoadingSpinner()
end function

function OnNodeReady()
    InitializePitctureInPicture()

    DisposableObserveFieldScoped(m.videoQueue, "hasPrevious", FuncName(OnHasPreviousChange))
    DisposableObserveFieldScoped(m.videoQueue, "hasNext", FuncName(OnHasNextChange))
    OnHasPreviousChange()
    OnHasNextChange()

    DisposableObserveFieldScoped(m.previousButton, "buttonSelected", FuncName(OnPreviousButtonSelected))
    DisposableObserveFieldScoped(m.playButton, "buttonSelected", FuncName(OnPlayButtonSelected))
    DisposableObserveFieldScoped(m.nextButton, "buttonSelected", FuncName(OnNextButtonSelected))
    DisposableObserveFieldScoped(m.minimizeButton, "buttonSelected", FuncName(OnMinimizeButtonSelected))

    DisposableObserveField(m.top, "state", FuncName(OnPlayerStateChange))
    DisposableObserveField(m.top, "bufferingStatus", FuncName(OnBufferingStatusChange))

    DisposableObserveField(m.progressTimer, "fire", FuncName(OnProgress))
    DisposableObserveField(m.hideVideoUiTimer, "fire", FuncName(OnHideVideoUiTimer))

    SetNavigation(m.previousButton, RemoteKeys.Right, m.playButton)
    SetNavigation(m.playButton, RemoteKeys.Right, m.nextButton)
    SetNavigation(m.nextButton, RemoteKeys.Right, m.minimizeButton)
    SetNavigation(m.playButton, RemoteKeys.Right, m.minimizeButton)

    SetNavigation(m.minimizeButton, RemoteKeys.Left, m.nextButton)
    SetNavigation(m.minimizeButton, RemoteKeys.Left, m.playButton)
    SetNavigation(m.nextButton, RemoteKeys.Left, m.playButton)
    SetNavigation(m.playButton, RemoteKeys.Left, m.previousButton)

    if m.top.hasFocus() and m.videoUi.visible and m.videoUi.opacity = 1
        NodeSetFocus(m.playButton, true)
    end if
end function

function PlayWithContent(contentNode as object)
    videoContentNode = CreateObject("roSGNode", "ContentNode")

    videoId = contentNode.videoId
    title = contentNode.title
    author = contentNode._author
    thumbnail = contentNode.thumbnail

    if not StringUtils.IsNullOrEmpty(videoId)
        videoContentNode.AddFields({ videoId: videoId })
    end if
    if not StringUtils.IsNullOrEmpty(title)
        videoContentNode.title = title
    end if
    ' NOTE: "_author" not "author". See PlaylistContentNode.xml for explanation.
    if not StringUtils.IsNullOrEmpty(author)
        videoContentNode.secondaryTitle = author
    end if

    if not StringUtils.IsNullOrEmpty(thumbnail)
        videoContentNode.thumbnail = thumbnail
        m.backgroundPosterSmall.uri = thumbnail
    end if

    StartVideoContentTask(videoContentNode)
end function

function StartVideoContentTask(videoContentNode as object)
    if m.videoContentTask <> invalid
        m.videoContentTask.cancel = true
    end if

    m.top.content = videoContentNode

    m.loadingLabel.text = Tr(Locale.VideoPlayer.Loading)
    m.loadingPercentLabel.text = ""
    m.loadingUi.visible = true
    m.loadingSpinner.control = "start"

    m.videoContentTask = AsyncTask.Start(Tasks.VideoContentTaskDev, {
        titleLabel: m.titleLabel
        secondaryTitleLabel: m.secondaryTitleLabel
        content: videoContentNode
        invidious: m.top.invidious
        backgroundPoster: m.backgroundPoster
    }, OnVideoContentTaskResults)
end function

function OnVideoContentTaskResults(output as object) as void
    m.videoContentTask = invalid
    if output.cancelled
        return
    end if

    if not output.success or not output.result.success
        ' output.error for unhandled exception
        error = output.error
        if error = invalid
            ' output.result.error for network errors
            error = output.result.error
        end if
        error = ErrorUtils.Format(error)
        LogError(error)
        m.top.close = true
        return
    end if

    m.top.control = "play"
end function

function OnClose()
    m.top.previousPlayer = invalid

    if m.videoContentTask <> invalid
        m.videoContentTask.cancel = true
        m.videoContentTask = invalid
    end if

    parent = m.top.getParent()
    if parent <> invalid
        parent.RemoveChild(m.top)
    end if

    m.top.control = "stop"
    m.top.content = invalid

    m.top.dispose = true
end function

function OnKeyEvent(key as string, press as boolean) as boolean
    m.hideVideoUiTimer.control = "stop"
    m.hideVideoUiTimer.control = "start"
    if ShowVideoUi()
        return true
    end if

    if NavigationKeyHandler(key, press).handled
        return true
    end if

    if press = false
        return false
    end if

    if key = RemoteKeys.Back
        m.videoQueue.closePlayer = true
        return true
    end if

    return false
end function

function OnHasPreviousChange()
    m.previousButton.disabled = not m.videoQueue.hasPrevious
end function

function OnHasNextChange()
    m.nextButton.disabled = not m.videoQueue.hasNext
end function

function OnPlayButtonSelected()
    state = m.top.state
    if state = "playing"
        m.top.control = "pause"
    else if state = "paused"
        m.top.control = "resume"
    end if
end function

function OnPreviousButtonSelected()
    m.videoQueue.previous = true
end function

function OnNextButtonSelected()
    m.videoQueue.next = true
end function

function OnMinimizeButtonSelected()
    VideoQueueUtils.ToggleVideoPictureInPicture(m.videoQueue)
end function

function OnPlayerStateChange() as void
    state = m.top.state

    if state = "stopping" or state = "stopped"
        m.videoUi.visible = false
        return
    end if

    if state = "playing"
        m.playButton.toggleState = false ' Pause icon
        m.playButton.disabled = false

        m.progressTimer.control = "start"
    else if state = "paused"
        m.playButton.toggleState = true ' Play icon
        m.playButton.disabled = false
    else
        m.playButton.disabled = true
    end if

    if state = "buffering"
        m.loadingLabel.text = Tr(Locale.VideoPlayer.Buffering)
        m.loadingSpinner.control = "start"
        m.loadingUi.visible = true
        m.backgroundPoster.visible = true
        m.backgroundPosterSmall.visible = true
    else
        m.loadingSpinner.control = "stop"
        m.loadingUi.visible = false
        m.backgroundPoster.visible = false
        m.backgroundPosterSmall.visible = false
    end if
end function

function OnBufferingStatusChange() as void
    bufferingStatus = m.top.bufferingStatus
    if bufferingStatus = invalid
        return
    end if

    m.loadingPercentLabel.text = `${bufferingStatus.percentage}%`
end function

function OnProgress() as void
    duration = m.top.duration
    if duration = 0
        m.trickPlayBar.progress = 0
        return
    end if

    m.trickPlayBar.progress = m.top.position / duration
end function

function OnHideVideoUiTimer()
    HideVideoUi()
end function

function OnDispose()
    ShutDownPitctureInPicture()
    m.fadeAnimation.control = "stop"
    m.hideVideoUiTimer.control = "stop"
    m.loadingSpinner.control = "stop"
    m.clock.dispose = true
    DisposeObservers()
end function

function SetupLoadingSpinner()
    m.loadingUi = m.top.findNode("LoadingUI")
    m.loadingSpinnerBackground = m.loadingUi.findNode("LoadingSpinnerBackground")
    m.loadingSpinner = m.loadingUi.findNode("LoadingSpinner")
    poster = m.loadingSpinner.poster

    size = 150
    poster.width = size
    poster.height = size
    centerx = (1280 - size) / 2
    centery = (720 - size) / 2
    m.loadingSpinner.translation = [centerx, centery]
    poster.opacity = 0.8
    poster.uri = "pkg:/images/spinner.png"

    size = 80
    centerx = (1280 - size) / 2
    centery = (720 - size) / 2
    m.loadingSpinnerBackground.translation = [centerx, centery]

    m.loadingLabel = m.loadingSpinner.findNode("LoadingLabel")
    m.loadingPercentLabel = m.loadingSpinner.findNode("LoadingPercentLabel")
end function

function ShowVideoUi() as boolean
    if m.fadeAnimation.state = "stopped"
        if m.videoUi.opacity = 1
            return false
        end if
    end if

    m.fadeAnimation.control = "stop"
    m.fadeOpacityInterpolator.reverse = false
    m.fadeAnimation.control = "start"

    if m.top.hasFocus()
        NodeSetFocus(m.playButton, true)
    end if

    return true
end function

function HideVideoUi() as void
    if m.fadeAnimation.state = "stopped"
        if m.videoUi.opacity = 0
            return
        end if
    end if
    m.fadeAnimation.control = "stop"
    m.fadeOpacityInterpolator.reverse = true
    m.fadeAnimation.control = "start"

    if m.top.isInFocusChain()
        NodeSetFocus(m.top, true)
    end if
end function
