import "pkg:/components/Navigation/Navigation.bs"
import "pkg:/source/AsyncTask/AsyncTask.bs"
import "pkg:/source/AsyncTask/Tasks.bs"
import "pkg:/source/utils/DisposableObserve.bs"
import "pkg:/source/utils/ErrorUtils.bs"
import "pkg:/source/utils/FocusManagement.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/Types.bs"

function Init()
    m.top.enableUI = false
    m.top.enableTrickPlay = false

    httpAgent = m.top.getHttpAgent()
    httpAgent.AddHeader("User-Agent", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:123.0) Gecko/20100101 Firefox/123.0")

    m.clock = m.top.findNode("Clock")

    m.titleLabel = m.top.findNode("TitleLabel")
    m.secondaryTitleLabel = m.top.findNode("SecondaryTitleLabel")

    m.previousButton = m.top.findNode("PreviousButton")
    m.playButton = m.top.findNode("PlayButton")
    m.nextButton = m.top.findNode("NextButton")

    DisposableObserveFieldScoped(m.playButton, "buttonSelected", FuncName(OnPlayButtonSelected))

    DisposableObserveField(m.top, "state", FuncName(OnPlayerStateChange))

    SetNavigation(m.previousButton, "right", m.playButton)
    SetNavigation(m.playButton, "left", m.previousButton)
    SetNavigation(m.playButton, "right", m.nextButton)
    SetNavigation(m.nextButton, "left", m.playButton)
end function

function OnNodeReady()
    DisposableObserveFieldScoped(m.videoQueue, "hasPrevious", FuncName(OnHasPreviousChange))
    DisposableObserveFieldScoped(m.videoQueue, "hasNext", FuncName(OnHasNextChange))
    OnHasPreviousChange()
    OnHasNextChange()

    DisposableObserveFieldScoped(m.previousButton, "buttonSelected", FuncName(OnPreviousButtonSelected))
    DisposableObserveFieldScoped(m.nextButton, "buttonSelected", FuncName(OnNextButtonSelected))
end function

function OnFocusChange() as void
    if not m.top.focus
        return
    end if

    NodeSetFocus(m.playButton, true)
end function

function PlayWithContent(contentNode as object)
    videoContentNode = CreateObject("roSGNode", "ContentNode")

    if not StringUtils.IsNullOrEmpty(contentNode.videoId)
        videoContentNode.AddFields({ videoId: contentNode.videoId })
    end if
    if not StringUtils.IsNullOrEmpty(contentNode.title)
        videoContentNode.title = contentNode.title
    end if
    ' NOTE: "_author" not "author". See PlaylistContentNode.xml for explanation.
    if not StringUtils.IsNullOrEmpty(contentNode._author)
        videoContentNode.secondaryTitle = contentNode._author
    end if

    StartVideoContentTask(videoContentNode)
end function

function StartVideoContentTask(videoContentNode as object)
    if m.videoContentTask <> invalid
        m.videoContentTask.cancel = true
    end if

    m.top.content = videoContentNode

    m.videoContentTask = AsyncTask.Start(Tasks.VideoContentTaskDev, {
        titleLabel: m.titleLabel
        secondaryTitleLabel: m.secondaryTitleLabel
        content: videoContentNode
        invidious: m.top.invidious
    }, OnVideoContentTaskResults)
end function

function OnVideoContentTaskResults(output as object) as void
    m.videoContentTask = invalid
    if output.cancelled
        return
    end if

    if not output.success or not output.result.success
        ' output.error for unhandled exception
        error = output.error
        if error = invalid
            ' output.result.error for network errors
            error = output.result.error
        end if
        error = ErrorUtils.Format(error)
        LogError(error)
        m.top.close = true
        return
    end if

    m.top.control = "play"
end function

function OnClose()
    m.top.previousPlayer = invalid

    if m.videoContentTask <> invalid
        m.videoContentTask.cancel = true
        m.videoContentTask = invalid
    end if

    parent = m.top.getParent()
    if parent <> invalid
        parent.RemoveChild(m.top)
    end if

    m.top.control = "stop"
    m.top.content = invalid

    m.top.dispose = true
end function

function OnkeyEvent(key as string, press as boolean) as boolean
    if NavigationKeyHandler(key, press).handled
        return true
    end if

    if press = false
        return false
    end if

    if key = "back"
        m.videoQueue.closePlayer = true
        return true
    end if

    return false
end function

function OnHasPreviousChange()
    m.previousButton.disabled = not m.videoQueue.hasPrevious
end function

function OnHasNextChange()
    m.nextButton.disabled = not m.videoQueue.hasNext
end function

function OnPlayButtonSelected()
    state = m.top.state
    if state = "playing"
        m.top.control = "pause"
    else if state = "paused"
        m.top.control = "resume"
    end if
end function

function OnPreviousButtonSelected()
    m.videoQueue.previous = true
end function

function OnNextButtonSelected()
    m.videoQueue.next = true
end function

function OnPlayerStateChange()
    state = m.top.state
    if state = "playing"
        m.playButton.toggleState = false ' Pause icon
    else if state = "paused"
        m.playButton.toggleState = true ' Play icon
    end if
end function

function OnDispose()
    m.clock.dispose = true
    DisposeObservers()
end function
