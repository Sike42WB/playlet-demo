import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/components/Services/Invidious/InvidiousToContentNode.bs"

@asynctask
function VideoContentTaskDev(input as object) as object
    titleLabel = input.titleLabel
    secondaryTitleLabel = input.secondaryTitleLabel
    backgroundPoster = input.backgroundPoster
    contentNode = input.content
    invidiousNode = input.invidious
    preferencesNode = input.preferences

    titleLabel.text = contentNode.title
    secondaryTitleLabel.text = contentNode.secondaryTitle

    videoId = contentNode.videoId

    if StringUtils.IsNullOrEmpty(videoId)
        throw "Can't load video information: videoId is missing"
    end if

    service = new Invidious.InvidiousService(invidiousNode)
    instance = service.GetInstance()

    backgroundPoster.uri = `${instance}/vi/${videoId}/maxresdefault.jpg`

    backend = preferencesNode["playback.backend"]
    if backend = "playlet"
        response = InnertubeService.GetVideoMetadata(videoId, { cancellation: m.top.cancellation })
    else
        response = service.GetVideoMetadata(videoId, { cancellation: m.top.cancellation })
    end if

    if m.top.cancel
        return invalid
    end if

    metadata = response.Json()

    if not response.IsSuccess() or metadata = invalid
        return {
            success: false
            error: response.ErrorMessage()
        }
    end if

    contentNode.title = metadata.title
    titleLabel.text = metadata.title

    secondaryTitle = `${metadata.author}`
    viewCount = InvidiousContent.VideoGetViewCountText(metadata)
    if not StringUtils.IsNullOrEmpty(viewCount)
        secondaryTitle = `${secondaryTitle} • ${viewCount}`
    end if
    pubslishedText = InvidiousContent.VideoGetPublishedText(metadata)
    if not StringUtils.IsNullOrEmpty(pubslishedText)
        secondaryTitle = `${secondaryTitle} • ${pubslishedText}`
    end if

    contentNode.secondaryTitle = secondaryTitle
    secondaryTitleLabel.text = secondaryTitle
    contentNode.live = metadata.liveNow

    streamUrls = CreateStreamUrls(metadata)
    contentNode.url = streamUrls[0]

    contentNode.addFields({
        metadata: metadata
        ' StreamUrls is taken
        playletStreamUrls: streamUrls
        playletStreamUrlIndex: 0
    })

    return {
        success: true
    }
end function

function CreateStreamUrls(metadata as object) as object
    streamUrls = []

    if metadata.hlsUrl <> invalid
        streamUrls.push(metadata.hlsUrl)
    else
        streamUrls.push(`http://127.0.0.1:8888/api/dash?v=${metadata.videoId}`)
    end if

    return streamUrls
end function
