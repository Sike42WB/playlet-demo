import "pkg:/source/utils/XmlFile.bs"

class DashManifest extends XmlFile

    public period as object

    public invidiousInstance as dynamic

    private formats as object

    function new(formats as object)
        super()
        m.formats = formats
    end function

    function setInvidiousInstance(instance as string)
        m.invidiousInstance = instance
    end function

    function createFromVideoMetadata(metadata as object, local as boolean)
        m.addMpd(metadata.lengthSeconds)
        m.addPeriod()

        adaptiveFormats = []
        adaptiveFormats.Append (metadata.adaptiveFormats)

        if local
            urlRegex = CreateObject("roRegex", "https?:\/\/\S+(\/\S+)", "i")

            for i = 0 to adaptiveFormats.Count() - 1
                adaptiveFormats[i].url = urlRegex.replace(adaptiveFormats[i].url, m.invidiousInstance + "\1")
            end for
        end if

        audioStreams = m.getAudioStreams(adaptiveFormats)
        videoStreams = m.getVideoStreams(adaptiveFormats)

        id = 0

        audioAdaptationSets = {}
        for i = 0 to audioStreams.Count() - 1
            stream = audioStreams[i]
            mimeType = stream.type.Tokenize(";")[0]
            if not audioAdaptationSets.DoesExist(mimeType)
                audioAdaptationSets[mimeType] = m.addAudioAdaptationSet(id, mimeType)
                id += 1
            end if
            adaptationSet = audioAdaptationSets[mimeType]
            m.addAudioRepresentation(adaptationSet, stream)
        end for

        videoAdaptationSets = {}
        for i = 0 to videoStreams.Count() - 1
            stream = videoStreams[i]
            mimeType = stream.type.Tokenize(";")[0]
            if not videoAdaptationSets.DoesExist(mimeType)
                videoAdaptationSets[mimeType] = m.addVideoAdaptationSet(id, mimeType)
                id += 1
            end if
            adaptationSet = videoAdaptationSets[mimeType]
            m.addVideoRepresentation(adaptationSet, stream)
        end for

    end function

    function getAudioStreams(streams as object) as object
        audioStreams = []
        for i = 0 to streams.Count() - 1
            stream = streams[i]
            if stream.type.startsWith("audio/") and stream.bitrate <> invalid and stream.init <> invalid and stream.index <> invalid
                audioStreams.Push(stream)
            end if
        end for

        audioStreams.SortBy("bitrate", "r")
        return audioStreams
    end function

    function getVideoStreams(streams as object) as object
        videoStreams = []
        for i = 0 to streams.Count() - 1
            stream = streams[i]
            if stream.type.startsWith("video/") and stream.init <> invalid and stream.index <> invalid
                if m.formats.DoesExist(stream.itag)
                    format = m.formats[stream.itag]
                    if stream.width = invalid and format.width <> invalid
                        stream.width = format.width
                    end if
                    if stream.height = invalid and format.height <> invalid
                        stream.height = format.height
                    end if
                    if stream.fps = invalid and format.fps <> invalid
                        stream.fps = format.fps
                    end if
                end if
                videoStreams.Push(stream)
            end if
        end for

        videoStreams.SortBy("width", "r")
        return videoStreams
    end function

    function addMpd(lengthSeconds as dynamic) as object
        attributes = {
            "xmlns": "urn:mpeg:dash:schema:mpd:2011",
            "profiles": "urn:mpeg:dash:profile:full:2011",
            "minBufferTime": "PT1.5S",
            "type": "static",
            "mediaPresentationDuration": `PT${lengthSeconds ?? 0}S`
        }
        m.xmlElement = m.setElement(m.xmlElement, "MPD", attributes)
        return m.xmlElement
    end function

    function addPeriod() as object
        m.period = m.addNewElement(m.xmlElement, "Period")
        return m.period
    end function

    function addAudioAdaptationSet(id as integer, mimeType as string) as object
        adaptationSet = m.addNewElement(m.period, "AdaptationSet", {
            "id": `${id}`,
            "mimeType": mimeType,
            "startWithSAP": "1",
            "subsegmentAlignment": "true"
        })
        m.addRole(adaptationSet, id)
        return adaptationSet
    end function

    function addRole(parent as object, id as integer) as object
        role = m.addNewElement(parent, "Role", {
            "schemeIdUri": "urn:mpeg:dash:role:2011",
            "value": id = 0 ? "main" : "alternate"
        })
        return role
    end function

    function addAudioRepresentation(adaptationSet as object, stream as object) as object
        codecs = stream.type.split("codecs=")[1]
        if codecs.startsWith(`"`)
            codecs = codecs.mid(1)
        end if
        if codecs.endsWith(`"`)
            codecs = codecs.left(codecs.len() - 1)
        end if
        representation = m.addNewElement(adaptationSet, "Representation", {
            "id": stream.itag,
            "codecs": codecs,
            "bandwidth": stream.bitrate
        })
        m.addNewElement(representation, "AudioChannelConfiguration", {
            "schemeIdUri": "urn:mpeg:dash:23003:3:audio_channel_configuration:2011",
            "value": `${stream.audioChannels}`
        })
        m.addNewElement(representation, "BaseURL").setBody(stream.url)
        segmentBase = m.addNewElement(representation, "SegmentBase", {
            "indexRange": stream.index
        })
        m.addNewElement(segmentBase, "Initialization", {
            "range": stream.init
        })
        return representation
    end function

    function addVideoAdaptationSet(id as integer, mimeType as string) as object
        adaptationSet = m.addNewElement(m.period, "AdaptationSet", {
            "id": `${id}`,
            "mimeType": mimeType,
            "startWithSAP": "1",
            "subsegmentAlignment": "true",
            "scanType": "progressive"
        })
        return adaptationSet
    end function

    function addVideoRepresentation(adaptationSet as object, stream as object) as object
        codecs = stream.type.split("codecs=")[1]
        if codecs.startsWith(`"`)
            codecs = codecs.mid(1)
        end if
        if codecs.endsWith(`"`)
            codecs = codecs.left(codecs.len() - 1)
        end if

        attributes = {
            "id": stream.itag,
            "codecs": codecs,
            "startWithSAP": "1",
            "maxPlayoutRate": "1",
            "bandwidth": stream.bitrate
        }
        if stream.width <> invalid
            attributes["width"] = `${stream.width}`
        end if
        if stream.height <> invalid
            attributes["height"] = `${stream.height}`
        end if
        if stream.fps <> invalid
            attributes["frameRate"] = `${stream.fps}`
        end if

        representation = m.addNewElement(adaptationSet, "Representation", attributes)
        m.addNewElement(representation, "BaseURL").setBody(stream.url)
        segmentBase = m.addNewElement(representation, "SegmentBase", {
            "indexRange": stream.index
        })
        m.addNewElement(segmentBase, "Initialization", {
            "range": stream.init
        })
        return representation
    end function
end class
