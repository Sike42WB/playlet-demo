import "pkg:/source/utils/RegistryUtils.bs"

namespace InvidiousSettings

    const DEFAULT_INSTANCE = "https://vid.puffyan.us"

    const INSTANCES_API = "https://api.invidious.io/instances.json?sort_by=type,users"

    function GetPreferences() as object
        return {
            instances: InvidiousSettings.GetCurrentInstances()
        }
    end function

    function SetPreferences() as boolean
        ' TODO
        return false
    end function

    function ResetPreferences()
        ' TODO
    end function

    function GetCurrentInstances() as object
        ' TODO: cache this call to avoid json parsing every time
        instances = InvidiousSettings.GetRegistryInstances()
        if instances.Count() > 0
            return instances
        end if

        publicInstances = InvidiousSettings.GetPublicInstances()
        if publicInstances <> invalid
            for i = 0 to publicInstances.Count() - 1
                if InvidiousSettings.IsValidPublicInstance(publicInstances[i])
                    instances.push(publicInstances[i].uri)
                end if
                if instances.Count() >= 5
                    exit for
                end if
            end for
        end if

        if instances.Count() > 0
            InvidiousSettings.SetRegistryInstances(instances)
            return instances
        end if

        return [InvidiousSettings.DEFAULT_INSTANCE]
    end function

    function GetSelectedInstance() as string
        instances = InvidiousSettings.GetCurrentInstances()
        return instances[0]
    end function

    function SetAuthToken(token as string, instance as string, username as dynamic)
        obj = {
            token: token,
            instance: instance
        }
        if username <> invalid
            obj.username = username
        end if

        json = FormatJson(obj)
        RegistryUtils.Write(RegistryUtils.INVIDIOUS_TOKEN, json)

        instances = InvidiousSettings.GetCurrentInstances()
        index = ArrayIndexOf(instances, instance)
        if index = -1
            instances.push(instance)
            InvidiousSettings.SetRegistryInstances(instances)
        end if
    end function

    function GetAuthToken() as dynamic
        tokenPayload = RegistryUtils.Read(RegistryUtils.INVIDIOUS_TOKEN)
        if tokenPayload = invalid
            return invalid
        end if
        return ParseJson(tokenPayload)
    end function

    function GetRegistryInstances() as object
        instances = RegistryUtils.Read(RegistryUtils.INVIDIOUS_INSTANCES)
        if instances = invalid
            return []
        end if
        return ParseJson(instances)
    end function

    function SetRegistryInstances(instances as object)
        RegistryUtils.Write(RegistryUtils.INVIDIOUS_INSTANCES, FormatJson(instances))
    end function

    function GetPublicInstances() as object
        if m.invidiousPublicInstances <> invalid
            return m.invidiousPublicInstances
        end if

        response = Requests().get(InvidiousSettings.INSTANCES_API)
        if response.statuscode = 200
            json = response.json
            instances = []

            for each instance in json
                data = instance[1]
                if data.monitor <> invalid and data.monitor.dailyRatios <> invalid
                    data.monitor.dailyRatios = invalid
                end if
                data["name"] = instance[0]
                instances.push(data)
            end for

            m.invidiousPublicInstances = instances
        end if

        return m.invidiousPublicInstances
    end function

    function IsValidPublicInstance(instance as object) as boolean
        if instance = invalid
            return false
        end if

        return instance.type = "https" and instance.api = true
    end function

end namespace
