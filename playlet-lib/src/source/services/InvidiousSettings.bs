import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/components/SettingsScreen/Settings.bs"
import "pkg:/source/roku_modules/rokurequests/Requests.brs"

namespace InvidiousSettings

    const DEFAULT_INSTANCE = "https://vid.puffyan.us"

    const INSTANCES_API = "https://api.invidious.io/instances.json?sort_by=type,users"

    function GetCurrentInstance() as object
        settings = FindAndGetPreferenceValues(["invidious.instance"])
        if settings <> invalid and settings["invidious.instance"] <> invalid and settings["invidious.instance"] <> ""
            return settings["invidious.instance"]
        end if

        backupInstances = InvidiousSettings.GetBackupInstances()
        if backupInstances.Count() > 0
            return backupInstances[0]
        end if
        return InvidiousSettings.DEFAULT_INSTANCE
    end function

    function SetAuthToken(token as string, instance as string, username as dynamic)
        obj = {
            token: token,
            instance: instance
        }
        if username <> invalid
            obj.username = username
        end if

        json = FormatJson(obj)
        RegistryUtils.Write(RegistryUtils.INVIDIOUS_TOKEN, json)
    end function

    function GetAuthToken() as dynamic
        tokenPayload = RegistryUtils.Read(RegistryUtils.INVIDIOUS_TOKEN)
        if tokenPayload = invalid
            return invalid
        end if
        return ParseJson(tokenPayload)
    end function

    function GetBackupInstances() as object
        if m.global.hasField("invidiousBackupInstances")
            return m.global.invidiousBackupInstances
        end if
        return []
    end function

    function FetchBackupInstances() as object
        backupInstances = []
        publicInstances = InvidiousSettings.GetPublicInstances()
        for i = 0 to publicInstances.Count() - 1
            if InvidiousSettings.IsValidPublicInstance(publicInstances[i])
                backupInstances.push(publicInstances[i].uri)
            end if
            if backupInstances.Count() >= 5
                exit for
            end if
        end for

        return backupInstances
    end function

    function GetPublicInstances() as object
        instances = []

        response = Requests().get(InvidiousSettings.INSTANCES_API)
        if response.statuscode = 200
            json = response.json

            for each instance in json
                data = instance[1]
                if data.monitor <> invalid and data.monitor.dailyRatios <> invalid
                    data.monitor.dailyRatios = invalid
                end if
                data["name"] = instance[0]
                instances.push(data)
            end for

        end if

        return instances
    end function

    function IsValidPublicInstance(instance as object) as boolean
        if instance = invalid
            return false
        end if

        return instance.type = "https" and instance.api = true
    end function

end namespace
