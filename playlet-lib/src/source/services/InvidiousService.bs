import "pkg:/source/roku_modules/rokurequests/Requests.brs"
import "pkg:/source/utils/TimeUtils.bs"
import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/General.bs"
import "pkg:/source/utils/Crypto.bs"
import "pkg:/source/services/InvidiousSettings.bs"

class InvidiousService
    private endpoints
    private responseHanlders

    function new()
        apiDefnitions = ParseJson(ReadAsciiFile("libpkg:/config/invidious_video_api.json"))
        m.endpoints = {}

        for each apiDefnition in apiDefnitions.endpoints
            m.endpoints[apiDefnition.name] = apiDefnition
        end for

        m.responseHanlders = {
            DefaultHandler: m.DefaultHandler,
            AuthFeedHandler: m.AuthFeedHandler,
            AuthPlaylistsHandler: m.AuthPlaylistsHandler,
            PlaylistHandler: m.PlaylistHandler
        }
    end function

    function MakeRequest(requestData as object) as object
        endpoint = m.endpoints[requestData.endpoint]
        if endpoint = invalid
            return invalid
        end if

        instance = InvidiousSettings.GetCurrentInstance()

        url = instance + endpoint.url

        args = { params: {} }

        if endpoint.authenticated = true
            authToken = InvidiousSettings.GetAuthToken()
            if authToken = invalid
                return invalid
            end if
            url = authToken.instance + endpoint.url
            args.headers = m.GetAuthenticationHeaders(authToken.token)
        end if

        if endpoint.queryParams <> invalid
            for each queryParamKey in endpoint.queryParams
                queryParam = endpoint.queryParams[queryParamKey]
                if queryParam.default <> invalid
                    if queryParam.type = "string"
                        args.params[queryParamKey] = queryParam.default
                    else if queryParam.type = "#ISO3166"
                        if queryParam.default = "GetUserCountryCode"
                            args.params[queryParamKey] = GetUserCountryCode()
                        else
                            args.params[queryParamKey] = queryParam.default
                        end if
                    end if
                end if
            end for
        end if

        if requestData.queryParams <> invalid
            args.params.append(requestData.queryParams)
        end if

        if requestData.pathParams <> invalid
            for each param in requestData.pathParams
                url = url.Replace(`:${param}`, requestData.pathParams[param])
            end for
        end if

        response = Requests().get(url, args)

        responseHandler = endpoint.responseHandler <> invalid ? m.responseHanlders[endpoint.responseHandler] : m.responseHanlders["DefaultHandler"]

        result = responseHandler(m, requestData, response)

        if result <> invalid and endpoint.authenticated = true
            ' Cache response for use by web app
            m.CacheResponse(requestData, result)
        end if

        return result
    end function

    function GetAuthenticationHeaders(token as string) as object
        return {
            "Authorization": `Bearer ${token}`
        }
    end function

    function DefaultHandler(m as object, requestData as object, response as object) as object
        if response.statuscode = 200
            return [{ title: requestData.title, videos: response.json }]
        end if
        return invalid
    end function

    function AuthFeedHandler(m as object, requestData as object, response as object) as object
        m.DeleteExpiredToken(response)

        if response.statuscode = 200
            videos = []
            videos.Append(response.json.notifications)
            videos.Append(response.json.videos)
            return [{ title: requestData.title, videos: videos }]
        end if
        return invalid
    end function

    function AuthPlaylistsHandler(m as object, requestData as object, response as object) as object
        m.DeleteExpiredToken(response)
        if response.statuscode = 200
            playlists = response.json
            result = []
            for each playlist in playlists
                result.push(m.ProcessPlaylist(requestData, playlist))
            end for
            return result
        end if
        return invalid
    end function

    function PlaylistHandler(m as object, requestData as object, response as object) as object
        if response.statuscode = 200
            playlist = response.json
            return [m.ProcessPlaylist(requestData, playlist)]
        end if
        return invalid
    end function

    function ProcessPlaylist(requestData as object, playlist as object) as object
        title = m.ProcessTemplate(requestData.title, playlist)
        return { title: title, videos: playlist.videos }
    end function

    function ProcessTemplate(template as string, data as object) as string
        for each key in data
            template = template.Replace(`%${key}%`, `${data[key]}`)
        end for
        return template
    end function

    function DeleteExpiredToken(response as object)
        if response.statuscode = 403
            print(`Server responded with 403: ${response.text}`)
            if m.IsTokenMaybeExpired() = true
                print("deleting token...")
                RegistryUtils.Delete(RegistryUtils.INVIDIOUS_TOKEN)
            end if
        end if
    end function

    ' Public Invidious instances fail a lot randomly, even with valid tokens
    ' For that reason, it's better to make sure the token actually expired by date
    ' TODO: this happens because instance owners do not set hmac_key https://github.com/iv-org/invidious/issues/3854
    ' Once hmac_key is enforced, this check can be removed.
    function IsTokenMaybeExpired() as dynamic
        authToken = InvidiousSettings.GetAuthToken()
        if authToken = invalid
            return invalid
        end if
        token = ParseJson(authToken.token)
        if token = invalid
            return invalid
        end if
        if not token.DoesExist("expire")
            return invalid
        end if
        expire = token["expire"]
        currentTime = TimeUtils.Now().AsSeconds()
        return expire < currentTime
    end function

    function CacheResponse(requestData as object, result as object)
        cacheKey = FormatJson(requestData)
        cacheKey = GetMd5(cacheKey)
        value = FormatJson(result)
        WriteAsciiFile(`tmp:/${cacheKey}.json`, value)
    end function
end class
