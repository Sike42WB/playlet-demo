import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/TimeUtils.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/WebUtils.bs"
import "pkg:/source/services/Invidious.bs"
import "pkg:/components/WebServer/HttpResponseSource.bs"

namespace Http
    function GetHttpResponseId() as integer
        m.http_response_id = validint(m.http_response_id) + 1
        return m.http_response_id
    end function

    class HttpResponse
        private log as log.Logger

        private source = Http.HttpResponseSource.NONE

        ' members
        private buf = invalid
        private header = invalid
        private path = invalid
        private request = invalid
        private id = 0
        ' copy-initializable members
        private start = 0
        private length = 0
        private sent = 0
        private header_sent = 0
        private header_only = false
        private buf_start = 0
        private http_code = 0
        private mimetype = "text/html" ' for errors
        private allow_origin

        private server
        private settings

        function new(request as HttpRequest, server as HttpServer, settings as HttpSettings)
            m.log = new log.Logger("HttpResponse")
            m.id = Http.GetHttpResponseId()
            m.server = server
            m.settings = settings
            m.Init(request)
        end function

        function Init(request as HttpRequest)
            m.buf = CreateObject("roByteArray")
            m.request = request
        end function

        function Process() as boolean
            routers = m.server.routers
            for each router in routers
                if router.OnRequest(m.request, m)
                    return true
                end if
            end for

            return true
        end function

        function Default(errcode as integer, reason as string)
            errname = WebUtils.HttpTitle(errcode)
            m.http_code = errcode

            buf = "<html><head><title>" + Stri(errcode).trim() + " " + errname + "</title></head><body>" + UnixNL()
            buf = buf + "<h1>" + errname + "</h1>" + UnixNL()
            buf = buf + reason + UnixNL()
            buf = buf + "<hr>" + UnixNL()
            buf = buf + m.GeneratedBy() + UnixNL()
            buf = buf + "</body></html>" + UnixNL()

            m.buf.fromasciistring(buf)
            m.length = m.buf.count()

            m.GenerateHeader(true)
            m.source = Http.HttpResponseSource.GENERATED
        end function

        function Redirect(where as string, code = 301 as integer)
            m.location = where
            message = "Moved to: <a href=" + Quote() + where + Quote() + ">" + where + "</a>"
            m.Default(code, message)
        end function

        function Json(data as object)
            m.http_code = 200

            buf = FormatJson(data)

            m.buf.fromasciistring(buf)
            m.length = m.buf.count()

            m.mimetype = "application/json"

            m.GenerateHeader(true)
            m.source = Http.HttpResponseSource.GENERATED
        end function

        function Send(sock as object, bufsize as integer) as integer
            sent = -1
            if m.source = Http.HttpResponseSource.FROMFILE
                if m.start + m.sent >= m.buf_start + m.buf.count()
                    m.buf_start = m.start + m.sent
                    m.buf.ReadFile(m.path, m.buf_start, bufsize)
                    m.log.info("Read" + Stri(m.buf.count()) + " bytes from source file @" + itostr(m.buf_start))
                end if
            end if
            buf_pos = m.start + m.sent - m.buf_start
            buf_remaining = m.buf.count() - buf_pos
            if buf_remaining = 0
                m.log.info("source buf is empty")
            end if
            req_remaining = m.length - m.sent
            if buf_remaining > req_remaining
                buf_remaining = req_remaining
            end if
            sent = sock.send(m.buf, buf_pos, buf_remaining)
            m.LogInfo(sent, m.buf_start + buf_pos, m.length)
            if sent > 0
                m.sent = m.sent + sent
            end if
            return sent
        end function

        function SendHeader(sock as object, bufsize as integer) as integer
            if m.header_sent = 0
                sent = sock.sendStr(m.header)
            else
                sent = sock.sendStr(m.header.mid(m.header_sent))
            end if
            m.LogInfo(sent, m.header_sent, m.header_length)
            if sent > 0
                m.header_sent = m.header_sent + sent
            end if
            return sent
        end function

        function GenerateHeader(close = false as boolean)
            code = m.http_code
            title = WebUtils.HttpTitle(code)
            m.header = "HTTP/1.1" + Stri(code) + " " + title + WinNL()
            m.header = m.header + "Date: " + m.Now() + WinNL()
            m.header = m.header + "Server: " + m.settings.PackageName + WinNL()
            if isstr(m.location)
                m.header = m.header + "Location: " + m.location + WinNL()
            end if
            if m.allow_origin <> invalid
                m.header = m.header + "Access-Control-Allow-Origin: " + m.allow_origin + WinNL()
            end if
            m.header = m.header + m.KeepAlive(close) + WinNL()
            m.header = m.header + "Content-Length:" + Stri(m.length) + WinNL()
            if code = 206
                m.header = m.header + "Content-Range: bytes" + m.MakeRange(m.start, m.length, m.filelength) + WinNL()
            end if
            m.header = m.header + "Content-Type: " + m.mimetype + WinNL()
            m.header = m.header + "Accept-Ranges: bytes" + WinNL()
            m.header = m.header + WinNL()
            m.header_length = m.header.len()
        end function

        function Done() as boolean
            return m.sent = m.length
        end function

        function DoneHeader() as boolean
            return m.header_sent = m.header_length
        end function

        function LogInfo(recent as integer, from as integer, total as integer)
            m.log.info("Sent" + Stri(recent) + " [" + m.MakeRange(from, recent, total) + "]")
        end function

        function KeepAlive(close as boolean) as string
            if close
                base = "Connection: close"
            else
                base = "Keep-Alive: timeout=" + Stri(m.settings.Idletime).trim()
            end if
            return base
        end function

        function Now() as string
            if m._now = invalid
                m._now = TimeUtils.RFC1123_Date(TimeUtils.Now())
            end if
            return m._now
        end function

        function GeneratedBy() as string
            return "generated by " + m.settings.PackageName + " on " + m.Now()
        end function

        function MakeRange(start as integer, length as integer, total as integer) as string
            return itostr(start) + "-" + itostr(start + length - 1) + "/" + itostr(total)
        end function

    end class
end namespace
