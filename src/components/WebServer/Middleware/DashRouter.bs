import "pkg:/source/services/InvidiousSettings.bs"
import "pkg:/source/roku_modules/rokurequests/Requests.brs"

namespace Http

    class DashRouter extends HttpRouter

        function new()
            super()

            m.Get("*", function(context as object) as boolean
                request = context.request
                response = context.response
                router = context.router

                route = request.uri
                if not route.StartsWith("/dash")
                    return false
                end if

                v = request.query.v
                local = request.query.local

                instance = InvidiousSettings.GetSelectedInstance()
                metadata = router.GetVideoMetadata(context, v)
                dashUrl = `${instance}/api/manifest/dash/id/${v}`

                if metadata = invalid and local = invalid
                    m.Redirect(dashUrl, 302)
                    return true
                end if

                if local <> invalid
                    dashUrl = `${dashUrl}?local=${local}`
                end if

                resp = Requests().get(dashUrl)
                text = resp.text
                if resp.statuscode = 200 and local = "true"
                    text = text.Replace("<BaseURL>/videoplayback", `<BaseURL>${instance}/videoplayback`)
                end if

                if resp.statuscode = 200 and metadata <> invalid
                    text = router.InjectStoryBoard(router, text, metadata)
                end if

                response.http_code = resp.statuscode
                response.buf.fromasciistring(text)
                response.length = response.buf.count() 
                response.mimetype = "application/xml"
                response.GenerateHeader(true)
                response.source = Http.HttpResponseSource.GENERATED

                return true
            end function)
        end function

        function GetVideoMetadata(context as object, videoId as string) as object
            scene = context.server.task.top.getScene()
            videoPlayer = scene.findNode("VideoPlayer")
            metadata = videoPlayer?.content?.metadata
            if metadata <> invalid and metadata.videoId = videoId
                return metadata
            end if
            metadata = Invidious.GetVideoMetadata(videoId)
            return metadata
        end function

        function InjectStoryBoard(router as object, dash as string, metadata as object) as string
            xml = CreateObject ("roXMLElement")
            if not xml.Parse(dash)
                return dash
            end if

            thumb_id = 0
            period = xml.GetChildNodes()[0]
            sets = period.GetChildNodes()
            for each set in sets
                attributes = set.GetAttributes()
                id = attributes.id
                idInt = id.toInt()
                if idInt >= thumb_id
                    thumb_id = idInt + 1
                end if
            end for

            thumbnails = router.GenerateThumbnailAdaptationSet(metadata, thumb_id)

            injectPoint = StringLastIndexOf(dash, "</AdaptationSet>") + "</AdaptationSet>".Len()

            newDash = dash.Left(injectPoint) + thumbnails + dash.Mid(injectPoint)

            return newDash
        end function

        function GenerateThumbnailAdaptationSet(metadata as object, id as integer) as string
            result = ""
            storyboards = metadata.storyboards
            for each storyboard in storyboards
                ' BUG: Broken storyboards have interval = 0 https://github.com/iv-org/invidious/issues/3441
                ' TODO: implement proper segments when storyboard.storyboardCount > 1
                if storyboard.interval > 0 and storyboard.storyboardCount = 1

                    ' BUG: storyboardHeight can be wrong https://github.com/iv-org/invidious/issues/3440
                    ' TODO: this fix/assumption is only if we have storyboard.storyboardCount = 1
                    storyboardHeight = storyboard.count \ storyboard.storyboardWidth
                    if storyboard.count mod storyboard.storyboardWidth > 0
                        storyboardHeight += 1
                    end if

                    tilesPerPage = storyboard.storyboardWidth * storyboardHeight
                    intervalSeconds = (storyboard.interval / 1000)
                    for i = 0 to storyboard.storyboardCount - 1
                        width = storyboard.width * storyboard.storyboardWidth
                        height = storyboard.height * storyboardHeight

                        tileCount = tilesPerPage
                        if i = storyboard.storyboardCount - 1
                            tileCount = storyboard.count mod tilesPerPage
                        end if

                        presentationTimeOffset = i * tilesPerPage * intervalSeconds

                        duration = tileCount * intervalSeconds

                        result += `<AdaptationSet id="${id}" mimeType="image/jpeg" contentType="image">`
                        result += `<SegmentTemplate duration="${duration}" startNumber="0"/>`
    
                        ' TODO: estimate bandwidth?
                        result += `<Representation id="thumbnails_${i}" bandwidth="12000" width="${width}" height="${height}" presentationTimeOffset="${presentationTimeOffset}">`
                        url = storyboard.templateUrl.Replace("$M", `${i}`)

                        urlEscapeChars = {}
                        urlEscapeChars["&"] = "&amp;"
                        urlEscapeChars["'"] = "&apos;"
                        urlEscapeChars[`"`] = "&quot;"
                        urlEscapeChars["<"] = "&lt;"
                        urlEscapeChars[">"] = "&gt;"

                        for each escapeChar in urlEscapeChars
                            url = url.Replace(escapeChar, urlEscapeChars[escapeChar])
                        end for

                        result += `<BaseURL>${url}</BaseURL>`
                        result += `<EssentialProperty schemeIdUri="http://dashif.org/guidelines/thumbnail_tile" value="${storyboard.storyboardWidth}x${storyboardHeight}"/>`
                        result += `</Representation>`
                        exit for
                    end for
                    result += `</AdaptationSet>`
                    id += 1
                    exit for
                end if
            end for
            return result
        end function

    end class

end namespace
