import "pkg:/source/roku_modules/rokurequests/Requests.brs"
import "pkg:/source/models/SearchSuggestionResult.bs"
import "pkg:/source/models/SearchFilter.bs"
import "pkg:/source/utils/Registry.bs"
import "pkg:/source/webserver/common/StringUtils.brs"
import "pkg:/source/webserver/common/General.brs"
import "pkg:/source/webserver/utils.brs"

namespace RokuYoutube.Services.Invidious
    const API_URL = "https://vid.puffyan.us"
    const POPULAR_ENDPOINT = "/api/v1/popular"
    const TRENDING_ENDPOINT = "/api/v1/trending"

    const VIDEOS_ENDPOINT = "/api/v1/videos"

    const SEARCH_SUGGEST_ENDPOINT = "/api/v1/search/suggestions"
    const SEARCH_ENDPOINT = "/api/v1/search"

    const AUTH_FEED = "/api/v1/auth/feed"
    const AUTH_PLAYLISTS = "/api/v1/auth/playlists"

    function GetCountryCode() as string
        if m.countryCode = invalid or m.countryCode = ""
            m.countryCode = CreateObject("roDeviceInfo").GetUserCountryCode()
        end if
        return m.countryCode
    end function

    function DefaultArgs() as object
        return {
            params: {
                region: GetCountryCode()
            }
        }
    end function

    function GetPopular() as object
        url = `${API_URL}${POPULAR_ENDPOINT}`

        args = DefaultArgs()
        response = Requests().get(url, args)

        if response.statuscode = 200
            return response.json
        end if
        return invalid
    end function

    function GetTrending(trendingType = "" as string) as object
        url = `${API_URL}${TRENDING_ENDPOINT}`

        args = DefaultArgs()
        if trendingType <> ""
            args.params.type = trendingType
        end if

        response = Requests().get(url, args)

        if response.statuscode = 200
            return response.json
        end if
        return invalid
    end function

    function GetVideoUrl(videoId as string, itag as string, local as boolean) as string
        url = `${API_URL}/latest_version?id=${videoId}&itag=${itag}`
        if local
            url = url + "&local=true"
        end if
        return url
    end function

    function GetVideoMetadata(videoId as string) as object
        url = `${API_URL}${VIDEOS_ENDPOINT}/${videoId}`

        args = DefaultArgs()
        response = Requests().get(url, args)

        ' TODO: handle 500 {"error":"This video is unavailable"}
        if response.statuscode = 200
            videoMetadata = response.json
            lastItag = videoMetadata.formatStreams[videoMetadata.formatStreams.Count() - 1].itag

            ' GetVideoUrl returns a url that redirects to the video stream
            ' TODO: is this reliable?
            videoUrl = RokuYoutube.Services.Invidious.GetVideoUrl(videoId, lastItag, false)

            videoMetadata.formatStreams.push({
                itag: lastItag,
                url: videoUrl
            })
            return videoMetadata
        end if
        return invalid
    end function

    function SearchSuggestions(q as string) as object 'SearchSuggestionResult
        url = `${API_URL}${SEARCH_SUGGEST_ENDPOINT}`

        args = DefaultArgs()
        args.params.q = q
        response = Requests().get(url, args)

        if response.statuscode = 200
            return response.json
        end if
        return invalid
    end function

    function Search(q as string, args = invalid as dynamic) as object
        'page = invalid as integer, sort_by = invalid as RokuYoutube.Models.Invidious.SearchFilter.SortBy, date = invalid as RokuYoutube.Models.Invidious.SearchFilter.Date, duration = invalid as RokuYoutube.Models.Invidious.SearchFilter.Duration, _type = invalid as RokuYoutube.Models.Invidious.SearchFilter.SearchType, features = invalid as RokuYoutube.Models.Invidious.SearchFilter.Features) as object
        url = `${API_URL}${SEARCH_ENDPOINT}`

        _args = DefaultArgs()
        _args.params.q = q

        if args <> invalid
            if args.page <> invalid
                _args.params.page = Str(args.page).Trim()
            end if
            if args.sort_by <> invalid
                _args.params.sort_by = args.sort_by
            end if
            if args.date <> invalid
                _args.params.date = args.date
            end if
            if args.duration <> invalid
                _args.params.duration = args.duration
            end if
            if args.type <> invalid
                _args.params.type = args.type
            end if
            if args.features <> invalid
                _args.params.features = args.features.join(",")
            end if
        end if
        response = Requests().get(url, _args)

        if response.statuscode = 200
            return response.json
        end if
        return invalid
    end function

    function GetCurrentHost() as string
        return API_URL
    end function

    function GetAuthorizeTokenLink() as string
        ' Make sure the host is not on https, because https cannot redirect to http, which is our local server
        invidiousHost = strReplace(API_URL, "https://", "http://")
        scope = ":*"

        localIp = GetLocalIpAddress()
        webServerPort = 8888
        expire = Now().AsSeconds() + 60 * 60 * 24 * 30 'A month from now

        callbackUrl = UrlEncode(`http://${localIp}:${webServerPort}/token_callback`)
        return `${invidiousHost}/authorize_token?scopes=${scope}&callback_url=${callbackUrl}&expire=${expire}`
    end function

    function GetAuthenticationHeaders() as object
        token = RokuYoutube.Utils.Registry.Read("token")
        if token = invalid
            return invalid
        end if
        return {
            "Authorization": `Bearer ${token}`
        }
    end function

    function GetUserFeed() as object
        headers = GetAuthenticationHeaders()
        if headers = invalid
            return invalid
        end if

        url = `${API_URL}${AUTH_FEED}`

        args = {
            headers: headers,
            retryCount: 3 'Sometimes authentication fails randomly with a valid token...
        }

        response = Requests().get(url, args)

        if response.statuscode = 403
            RokuYoutube.Utils.Registry.Delete("token")
        end if
        if response.statuscode = 200
            return response.json.videos
        end if
        return invalid
    end function

    function GetUserPlaylists() as object
        headers = GetAuthenticationHeaders()
        if headers = invalid
            return invalid
        end if

        url = `${API_URL}${AUTH_PLAYLISTS}`

        args = {
            headers: headers,
            retryCount: 3 'Sometimes authentication fails randomly with a valid token...
        }

        response = Requests().get(url, args)

        if response.statuscode = 403
            RokuYoutube.Utils.Registry.Delete("token")
        end if
        if response.statuscode = 200
            return response.json
        end if
        return invalid
    end function
end namespace
